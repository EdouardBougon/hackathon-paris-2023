// Generated by @wagmi/cli@1.3.0 on 7/22/2023 at 5:39:20 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  { type: 'error', inputs: [], name: 'ERC721EnumerableForbiddenBatchMint' },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
  {
    type: 'error',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721OutOfBoundsIndex',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Deploy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CustomSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const customSafeABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AddedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'approvedHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ApproveHash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'handler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedFallbackHandler',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChangedThreshold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DisabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EnabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemovedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SafeReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'initiator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owners',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'initializer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fallbackHandler',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SafeSetup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'msgHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SignMsg',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VERSION',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addOwnerWithThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashToApprove', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approveHash',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approvedHashes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'changeThreshold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'requiredSignatures', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkNSignatures',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkSignatures',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevModule', internalType: 'address', type: 'address' },
      { name: 'module', internalType: 'address', type: 'address' },
    ],
    name: 'disableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'domainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'enableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'encodeTransactionData',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execTransaction',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModule',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModuleReturnData',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'start', internalType: 'address', type: 'address' },
      { name: 'pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getModulesPaginated',
    outputs: [
      { name: 'array', internalType: 'address[]', type: 'address[]' },
      { name: 'next', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStorageAt',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTransactionHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'isModuleEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'handler', internalType: 'address', type: 'address' }],
    name: 'setFallbackHandler',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'fallbackHandler', internalType: 'address', type: 'address' },
      { name: 'paymentToken', internalType: 'address', type: 'address' },
      { name: 'payment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'paymentReceiver',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'signedMessages',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetContract', internalType: 'address', type: 'address' },
      { name: 'calldataPayload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateAndRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'swapOwner',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FallbackManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fallbackManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'handler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedFallbackHandler',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'handler', internalType: 'address', type: 'address' }],
    name: 'setFallbackHandler',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseGuardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'success', internalType: 'bool', type: 'bool' },
    ],
    name: 'checkAfterExecution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'msgSender', internalType: 'address', type: 'address' },
    ],
    name: 'checkTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Guard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'success', internalType: 'bool', type: 'bool' },
    ],
    name: 'checkAfterExecution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'msgSender', internalType: 'address', type: 'address' },
    ],
    name: 'checkTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GuardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxyCreationCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyCreationCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proxyCreated',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISignatureValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSignatureValidatorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_data', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Math
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mathABI = [
  { type: 'error', inputs: [], name: 'MathOverflowedMulDiv' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockErc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  { type: 'error', inputs: [], name: 'ERC721EnumerableForbiddenBatchMint' },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
  {
    type: 'error',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721OutOfBoundsIndex',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ModuleManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const moduleManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DisabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EnabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleSuccess',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevModule', internalType: 'address', type: 'address' },
      { name: 'module', internalType: 'address', type: 'address' },
    ],
    name: 'disableModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'enableModule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModule',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModuleReturnData',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'start', internalType: 'address', type: 'address' },
      { name: 'pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getModulesPaginated',
    outputs: [
      { name: 'array', internalType: 'address[]', type: 'address[]' },
      { name: 'next', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'isModuleEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NftGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nftGuardABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_wethContractAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'success', internalType: 'bool', type: 'bool' },
    ],
    name: 'checkAfterExecution',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'msgSender', internalType: 'address', type: 'address' },
    ],
    name: 'checkTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NativeCurrencyPaymentFallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nativeCurrencyPaymentFallbackABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SafeReceived',
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnerManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownerManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AddedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChangedThreshold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemovedOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addOwnerWithThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'changeThreshold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'swapOwner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PositionDelegation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const positionDelegationABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_wethContractAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'ERC721EnumerableForbiddenBatchMint' },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
  {
    type: 'error',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721OutOfBoundsIndex',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'delegate',
    outputs: [
      { name: 'returnedSafeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userAddress', internalType: 'address', type: 'address' }],
    name: 'getOrCreateSafe',
    outputs: [
      { name: 'safeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'userAddress', internalType: 'address', type: 'address' }],
    name: 'getSafeAddressForUser',
    outputs: [
      { name: 'safeAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeToTokenIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenIdToSafe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'userToSafe',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Safe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AddedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'approvedHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ApproveHash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'handler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedFallbackHandler',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'guard',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ChangedGuard',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChangedThreshold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DisabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'EnabledModule',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleFailure',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'module',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ExecutionFromModuleSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'payment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutionSuccess',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RemovedOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SafeReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'initiator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owners',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'threshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'initializer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fallbackHandler',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SafeSetup',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'msgHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SignMsg',
  },
  { stateMutability: 'nonpayable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VERSION',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addOwnerWithThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashToApprove', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approveHash',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'approvedHashes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'changeThreshold',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
      { name: 'requiredSignatures', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'checkNSignatures',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'dataHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkSignatures',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevModule', internalType: 'address', type: 'address' },
      { name: 'module', internalType: 'address', type: 'address' },
    ],
    name: 'disableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'domainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'enableModule',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'encodeTransactionData',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      {
        name: 'refundReceiver',
        internalType: 'address payable',
        type: 'address',
      },
      { name: 'signatures', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execTransaction',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModule',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
    ],
    name: 'execTransactionFromModuleReturnData',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'start', internalType: 'address', type: 'address' },
      { name: 'pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getModulesPaginated',
    outputs: [
      { name: 'array', internalType: 'address[]', type: 'address[]' },
      { name: 'next', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStorageAt',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'enum Enum.Operation', type: 'uint8' },
      { name: 'safeTxGas', internalType: 'uint256', type: 'uint256' },
      { name: 'baseGas', internalType: 'uint256', type: 'uint256' },
      { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'gasToken', internalType: 'address', type: 'address' },
      { name: 'refundReceiver', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTransactionHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'module', internalType: 'address', type: 'address' }],
    name: 'isModuleEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'handler', internalType: 'address', type: 'address' }],
    name: 'setFallbackHandler',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'guard', internalType: 'address', type: 'address' }],
    name: 'setGuard',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_threshold', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'fallbackHandler', internalType: 'address', type: 'address' },
      { name: 'paymentToken', internalType: 'address', type: 'address' },
      { name: 'payment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'paymentReceiver',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'signedMessages',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetContract', internalType: 'address', type: 'address' },
      { name: 'calldataPayload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateAndRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'prevOwner', internalType: 'address', type: 'address' },
      { name: 'oldOwner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'swapOwner',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'masterCopy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_singleton', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'fallback' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proxy',
        internalType: 'contract SafeProxy',
        type: 'address',
        indexed: true,
      },
      {
        name: 'singleton',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProxyCreation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createChainSpecificProxyWithNonce',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
      {
        name: 'callback',
        internalType: 'contract IProxyCreationCallback',
        type: 'address',
      },
    ],
    name: 'createProxyWithCallback',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_singleton', internalType: 'address', type: 'address' },
      { name: 'initializer', internalType: 'bytes', type: 'bytes' },
      { name: 'saltNonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createProxyWithNonce',
    outputs: [
      { name: 'proxy', internalType: 'contract SafeProxy', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'proxyCreationCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Script
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdStorageSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdStorageSafeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      { name: 'fsig', internalType: 'bytes4', type: 'bytes4', indexed: false },
      {
        name: 'keysHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WARNING_UninitedSlot',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StorageAccessible
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageAccessibleABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStorageAt',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetContract', internalType: 'address', type: 'address' },
      { name: 'calldataPayload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'simulateAndRevert',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Strings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stringsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'StringsInsufficientHexLength',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activeFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'allowCheatcodes',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'char', internalType: 'string', type: 'string' }],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'char', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newChainId', internalType: 'uint256', type: 'uint256' }],
    name: 'chainId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'clearMockedCalls',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newCoinbase', internalType: 'address', type: 'address' }],
    name: 'coinbase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'createDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deal',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newDifficulty', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'difficulty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'newRuntimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'etch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'gas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'gas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'minGas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCallMinGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'minGas', internalType: 'uint64', type: 'uint64' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'count', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectCallMinGas',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
      { name: 'emitter', internalType: 'address', type: 'address' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'emitter', internalType: 'address', type: 'address' }],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes4', type: 'bytes4' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes', type: 'bytes' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'min', internalType: 'uint64', type: 'uint64' },
      { name: 'max', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectSafeMemory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'min', internalType: 'uint64', type: 'uint64' },
      { name: 'max', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'expectSafeMemoryCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBasefee', internalType: 'uint256', type: 'uint256' }],
    name: 'fee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [
      { name: 'creationBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [
      { name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getLabel',
    outputs: [{ name: 'currentLabel', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isPersistent',
    outputs: [{ name: 'persistent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
      { name: 'account2', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'revertData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCallRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'revertData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCallRevert',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseAddress',
    outputs: [
      { name: 'parsedValue', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes32',
    outputs: [
      { name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseUint',
    outputs: [
      { name: 'parsedValue', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pauseGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newPrevrandao', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'prevrandao',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'readCallers',
    outputs: [
      {
        name: 'callerMode',
        internalType: 'enum VmSafe.CallerMode',
        type: 'uint8',
      },
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
      { name: 'followLinks', internalType: 'bool', type: 'bool' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'linkPath', internalType: 'string', type: 'string' }],
    name: 'readLink',
    outputs: [{ name: 'targetPath', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'removeDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'resetNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resumeGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
    name: 'revertTo',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newHeight', internalType: 'uint256', type: 'uint256' }],
    name: 'roll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [
      { name: 'urls', internalType: 'string[2][]', type: 'string[2][]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
    name: 'selectFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newNonce', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonce',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newNonce', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonceUnsafe',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'skipTest', internalType: 'bool', type: 'bool' }],
    name: 'skip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'store',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newGasPrice', internalType: 'uint256', type: 'uint256' }],
    name: 'txGasPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'warp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VmSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmSafeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'char', internalType: 'string', type: 'string' }],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'char', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'breakpoint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'createDir',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'commandInput', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [
      { name: 'creationBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [
      { name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getLabel',
    outputs: [{ name: 'currentLabel', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseAddress',
    outputs: [
      { name: 'parsedValue', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseBytes32',
    outputs: [
      { name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
    name: 'parseUint',
    outputs: [
      { name: 'parsedValue', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pauseGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'maxDepth', internalType: 'uint64', type: 'uint64' },
      { name: 'followLinks', internalType: 'bool', type: 'bool' },
    ],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readDir',
    outputs: [
      {
        name: 'entries',
        internalType: 'struct VmSafe.DirEntry[]',
        type: 'tuple[]',
        components: [
          { name: 'errorMessage', internalType: 'string', type: 'string' },
          { name: 'path', internalType: 'string', type: 'string' },
          { name: 'depth', internalType: 'uint64', type: 'uint64' },
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'linkPath', internalType: 'string', type: 'string' }],
    name: 'readLink',
    outputs: [{ name: 'targetPath', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'recursive', internalType: 'bool', type: 'bool' },
    ],
    name: 'removeDir',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resumeGasMetering',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [
      { name: 'urls', internalType: 'string[2][]', type: 'string[2][]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [
      { name: 'stringifiedValue', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC1155InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidApprover',
  },
  {
    type: 'error',
    inputs: [
      { name: 'idsLength', internalType: 'uint256', type: 'uint256' },
      { name: 'valuesLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC1155InvalidArrayLength',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC1155InvalidSender',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC1155MissingApprovalForAll',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'allowance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'balance', internalType: 'uint256', type: 'uint256' },
      { name: 'needed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC20InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'ERC20InvalidSpender',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ErrorsABI = [
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'ERC721IncorrectOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ERC721InsufficientApproval',
  },
  {
    type: 'error',
    inputs: [{ name: 'approver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidApprover',
  },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOperator',
  },
  {
    type: 'error',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidOwner',
  },
  {
    type: 'error',
    inputs: [{ name: 'receiver', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidReceiver',
  },
  {
    type: 'error',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'ERC721InvalidSender',
  },
  {
    type: 'error',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ERC721NonexistentToken',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721EnumerableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, TFunctionName, TMode>({
    abi: erc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721EnumerableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'approve', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721EnumerableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721EnumerableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721EnumerableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721EnumerableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721EnumerableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'transferFrom', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721EnumerableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721EnumerableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721EnumerableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployABI}__.
 */
export function useDeployRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof deployABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: deployABI, ...config } as UseContractReadConfig<
    typeof deployABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useDeployIsScript<
  TFunctionName extends 'IS_SCRIPT',
  TSelectData = ReadContractResult<typeof deployABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof deployABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: deployABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof deployABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployABI}__.
 */
export function useDeployWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof deployABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof deployABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof deployABI, TFunctionName, TMode>({
    abi: deployABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployABI}__ and `functionName` set to `"run"`.
 */
export function useDeployRun<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof deployABI, 'run'>['request']['abi'],
        'run',
        TMode
      > & { functionName?: 'run' }
    : UseContractWriteConfig<typeof deployABI, 'run', TMode> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<typeof deployABI, 'run', TMode>({
    abi: deployABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployABI}__.
 */
export function usePrepareDeployWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareDeployRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployABI, 'run'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'approve', TMode>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__.
 */
export function useCustomSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"VERSION"`.
 */
export function useCustomSafeVersion<
  TFunctionName extends 'VERSION',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'VERSION',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"approvedHashes"`.
 */
export function useCustomSafeApprovedHashes<
  TFunctionName extends 'approvedHashes',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'approvedHashes',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"checkNSignatures"`.
 */
export function useCustomSafeCheckNSignatures<
  TFunctionName extends 'checkNSignatures',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'checkNSignatures',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"checkSignatures"`.
 */
export function useCustomSafeCheckSignatures<
  TFunctionName extends 'checkSignatures',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'checkSignatures',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"domainSeparator"`.
 */
export function useCustomSafeDomainSeparator<
  TFunctionName extends 'domainSeparator',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'domainSeparator',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"encodeTransactionData"`.
 */
export function useCustomSafeEncodeTransactionData<
  TFunctionName extends 'encodeTransactionData',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'encodeTransactionData',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getChainId"`.
 */
export function useCustomSafeGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useCustomSafeGetModulesPaginated<
  TFunctionName extends 'getModulesPaginated',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getModulesPaginated',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getOwners"`.
 */
export function useCustomSafeGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useCustomSafeGetStorageAt<
  TFunctionName extends 'getStorageAt',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getStorageAt',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useCustomSafeGetThreshold<
  TFunctionName extends 'getThreshold',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getThreshold',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"getTransactionHash"`.
 */
export function useCustomSafeGetTransactionHash<
  TFunctionName extends 'getTransactionHash',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'getTransactionHash',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useCustomSafeIsModuleEnabled<
  TFunctionName extends 'isModuleEnabled',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'isModuleEnabled',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"isOwner"`.
 */
export function useCustomSafeIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"nonce"`.
 */
export function useCustomSafeNonce<
  TFunctionName extends 'nonce',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"signedMessages"`.
 */
export function useCustomSafeSignedMessages<
  TFunctionName extends 'signedMessages',
  TSelectData = ReadContractResult<typeof customSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: customSafeABI,
    functionName: 'signedMessages',
    ...config,
  } as UseContractReadConfig<typeof customSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__.
 */
export function useCustomSafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof customSafeABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, TFunctionName, TMode>({
    abi: customSafeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useCustomSafeAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'addOwnerWithThreshold'
        >['request']['abi'],
        'addOwnerWithThreshold',
        TMode
      > & { functionName?: 'addOwnerWithThreshold' }
    : UseContractWriteConfig<
        typeof customSafeABI,
        'addOwnerWithThreshold',
        TMode
      > & {
        abi?: never
        functionName?: 'addOwnerWithThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'addOwnerWithThreshold', TMode>(
    {
      abi: customSafeABI,
      functionName: 'addOwnerWithThreshold',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"approveHash"`.
 */
export function useCustomSafeApproveHash<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'approveHash'
        >['request']['abi'],
        'approveHash',
        TMode
      > & { functionName?: 'approveHash' }
    : UseContractWriteConfig<typeof customSafeABI, 'approveHash', TMode> & {
        abi?: never
        functionName?: 'approveHash'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'approveHash', TMode>({
    abi: customSafeABI,
    functionName: 'approveHash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useCustomSafeChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'changeThreshold'
        >['request']['abi'],
        'changeThreshold',
        TMode
      > & { functionName?: 'changeThreshold' }
    : UseContractWriteConfig<typeof customSafeABI, 'changeThreshold', TMode> & {
        abi?: never
        functionName?: 'changeThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'changeThreshold', TMode>({
    abi: customSafeABI,
    functionName: 'changeThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"disableModule"`.
 */
export function useCustomSafeDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'disableModule'
        >['request']['abi'],
        'disableModule',
        TMode
      > & { functionName?: 'disableModule' }
    : UseContractWriteConfig<typeof customSafeABI, 'disableModule', TMode> & {
        abi?: never
        functionName?: 'disableModule'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'disableModule', TMode>({
    abi: customSafeABI,
    functionName: 'disableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"enableModule"`.
 */
export function useCustomSafeEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'enableModule'
        >['request']['abi'],
        'enableModule',
        TMode
      > & { functionName?: 'enableModule' }
    : UseContractWriteConfig<typeof customSafeABI, 'enableModule', TMode> & {
        abi?: never
        functionName?: 'enableModule'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'enableModule', TMode>({
    abi: customSafeABI,
    functionName: 'enableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function useCustomSafeExecTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'execTransaction'
        >['request']['abi'],
        'execTransaction',
        TMode
      > & { functionName?: 'execTransaction' }
    : UseContractWriteConfig<typeof customSafeABI, 'execTransaction', TMode> & {
        abi?: never
        functionName?: 'execTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'execTransaction', TMode>({
    abi: customSafeABI,
    functionName: 'execTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useCustomSafeExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'execTransactionFromModule'
        >['request']['abi'],
        'execTransactionFromModule',
        TMode
      > & { functionName?: 'execTransactionFromModule' }
    : UseContractWriteConfig<
        typeof customSafeABI,
        'execTransactionFromModule',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModule'
      } = {} as any,
) {
  return useContractWrite<
    typeof customSafeABI,
    'execTransactionFromModule',
    TMode
  >({
    abi: customSafeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useCustomSafeExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'execTransactionFromModuleReturnData'
        >['request']['abi'],
        'execTransactionFromModuleReturnData',
        TMode
      > & { functionName?: 'execTransactionFromModuleReturnData' }
    : UseContractWriteConfig<
        typeof customSafeABI,
        'execTransactionFromModuleReturnData',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModuleReturnData'
      } = {} as any,
) {
  return useContractWrite<
    typeof customSafeABI,
    'execTransactionFromModuleReturnData',
    TMode
  >({
    abi: customSafeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useCustomSafeRemoveOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof customSafeABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'removeOwner', TMode>({
    abi: customSafeABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useCustomSafeSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'setFallbackHandler'
        >['request']['abi'],
        'setFallbackHandler',
        TMode
      > & { functionName?: 'setFallbackHandler' }
    : UseContractWriteConfig<
        typeof customSafeABI,
        'setFallbackHandler',
        TMode
      > & {
        abi?: never
        functionName?: 'setFallbackHandler'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'setFallbackHandler', TMode>({
    abi: customSafeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setGuard"`.
 */
export function useCustomSafeSetGuard<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'setGuard'
        >['request']['abi'],
        'setGuard',
        TMode
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<typeof customSafeABI, 'setGuard', TMode> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'setGuard', TMode>({
    abi: customSafeABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setup"`.
 */
export function useCustomSafeSetup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'setup'
        >['request']['abi'],
        'setup',
        TMode
      > & { functionName?: 'setup' }
    : UseContractWriteConfig<typeof customSafeABI, 'setup', TMode> & {
        abi?: never
        functionName?: 'setup'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'setup', TMode>({
    abi: customSafeABI,
    functionName: 'setup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useCustomSafeSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'simulateAndRevert'
        >['request']['abi'],
        'simulateAndRevert',
        TMode
      > & { functionName?: 'simulateAndRevert' }
    : UseContractWriteConfig<
        typeof customSafeABI,
        'simulateAndRevert',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateAndRevert'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'simulateAndRevert', TMode>({
    abi: customSafeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useCustomSafeSwapOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof customSafeABI,
          'swapOwner'
        >['request']['abi'],
        'swapOwner',
        TMode
      > & { functionName?: 'swapOwner' }
    : UseContractWriteConfig<typeof customSafeABI, 'swapOwner', TMode> & {
        abi?: never
        functionName?: 'swapOwner'
      } = {} as any,
) {
  return useContractWrite<typeof customSafeABI, 'swapOwner', TMode>({
    abi: customSafeABI,
    functionName: 'swapOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__.
 */
export function usePrepareCustomSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareCustomSafeAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof customSafeABI,
      'addOwnerWithThreshold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof customSafeABI,
    'addOwnerWithThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"approveHash"`.
 */
export function usePrepareCustomSafeApproveHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'approveHash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'approveHash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'approveHash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareCustomSafeChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'changeThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'changeThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'changeThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareCustomSafeDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'disableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'disableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'disableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareCustomSafeEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'enableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'enableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'enableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function usePrepareCustomSafeExecTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'execTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'execTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'execTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareCustomSafeExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof customSafeABI,
      'execTransactionFromModule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof customSafeABI,
    'execTransactionFromModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareCustomSafeExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof customSafeABI,
      'execTransactionFromModuleReturnData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof customSafeABI,
    'execTransactionFromModuleReturnData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareCustomSafeRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareCustomSafeSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'setFallbackHandler'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof customSafeABI,
    'setFallbackHandler'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareCustomSafeSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'setGuard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"setup"`.
 */
export function usePrepareCustomSafeSetup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'setup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'setup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'setup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareCustomSafeSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'simulateAndRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'simulateAndRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link customSafeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareCustomSafeSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof customSafeABI, 'swapOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: customSafeABI,
    functionName: 'swapOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof customSafeABI, 'swapOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__.
 */
export function useCustomSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useCustomSafeAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'AddedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'AddedOwner',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ApproveHash"`.
 */
export function useCustomSafeApproveHashEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ApproveHash'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ApproveHash',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ApproveHash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useCustomSafeChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ChangedFallbackHandler'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ChangedFallbackHandler',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ChangedFallbackHandler'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useCustomSafeChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useCustomSafeChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ChangedThreshold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ChangedThreshold',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ChangedThreshold'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useCustomSafeDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'DisabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'DisabledModule',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'DisabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useCustomSafeEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'EnabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'EnabledModule',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'EnabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ExecutionFailure"`.
 */
export function useCustomSafeExecutionFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ExecutionFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ExecutionFailure',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ExecutionFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useCustomSafeExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ExecutionFromModuleFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ExecutionFromModuleFailure',
    ...config,
  } as UseContractEventConfig<
    typeof customSafeABI,
    'ExecutionFromModuleFailure'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useCustomSafeExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ExecutionFromModuleSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ExecutionFromModuleSuccess',
    ...config,
  } as UseContractEventConfig<
    typeof customSafeABI,
    'ExecutionFromModuleSuccess'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"ExecutionSuccess"`.
 */
export function useCustomSafeExecutionSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'ExecutionSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'ExecutionSuccess',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'ExecutionSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useCustomSafeRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'RemovedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'RemovedOwner',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useCustomSafeSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'SafeReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'SafeReceived',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'SafeReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"SafeSetup"`.
 */
export function useCustomSafeSafeSetupEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'SafeSetup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'SafeSetup',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'SafeSetup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link customSafeABI}__ and `eventName` set to `"SignMsg"`.
 */
export function useCustomSafeSignMsgEvent(
  config: Omit<
    UseContractEventConfig<typeof customSafeABI, 'SignMsg'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: customSafeABI,
    eventName: 'SignMsg',
    ...config,
  } as UseContractEventConfig<typeof customSafeABI, 'SignMsg'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof fallbackManagerABI, TFunctionName, TMode>({
    abi: fallbackManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useFallbackManagerSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          'setFallbackHandler'
        >['request']['abi'],
        'setFallbackHandler',
        TMode
      > & { functionName?: 'setFallbackHandler' }
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        'setFallbackHandler',
        TMode
      > & {
        abi?: never
        functionName?: 'setFallbackHandler'
      } = {} as any,
) {
  return useContractWrite<
    typeof fallbackManagerABI,
    'setFallbackHandler',
    TMode
  >({
    abi: fallbackManagerABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function usePrepareFallbackManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareFallbackManagerSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fallbackManagerABI,
      'setFallbackHandler'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fallbackManagerABI,
    'setFallbackHandler'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    ...config,
  } as UseContractEventConfig<typeof fallbackManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useFallbackManagerChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, 'ChangedFallbackHandler'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    eventName: 'ChangedFallbackHandler',
    ...config,
  } as UseContractEventConfig<
    typeof fallbackManagerABI,
    'ChangedFallbackHandler'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBaseGuardSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof baseGuardABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, TFunctionName, TMode>({
    abi: baseGuardABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useBaseGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          'checkAfterExecution'
        >['request']['abi'],
        'checkAfterExecution',
        TMode
      > & { functionName?: 'checkAfterExecution' }
    : UseContractWriteConfig<
        typeof baseGuardABI,
        'checkAfterExecution',
        TMode
      > & {
        abi?: never
        functionName?: 'checkAfterExecution'
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, 'checkAfterExecution', TMode>({
    abi: baseGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useBaseGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          'checkTransaction'
        >['request']['abi'],
        'checkTransaction',
        TMode
      > & { functionName?: 'checkTransaction' }
    : UseContractWriteConfig<typeof baseGuardABI, 'checkTransaction', TMode> & {
        abi?: never
        functionName?: 'checkTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, 'checkTransaction', TMode>({
    abi: baseGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function usePrepareBaseGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareBaseGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkAfterExecution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseGuardABI,
    'checkAfterExecution'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareBaseGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, 'checkTransaction'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: guardABI, ...config } as UseContractReadConfig<
    typeof guardABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGuardSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: guardABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof guardABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, TFunctionName, TMode>({
    abi: guardABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          'checkAfterExecution'
        >['request']['abi'],
        'checkAfterExecution',
        TMode
      > & { functionName?: 'checkAfterExecution' }
    : UseContractWriteConfig<typeof guardABI, 'checkAfterExecution', TMode> & {
        abi?: never
        functionName?: 'checkAfterExecution'
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, 'checkAfterExecution', TMode>({
    abi: guardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          'checkTransaction'
        >['request']['abi'],
        'checkTransaction',
        TMode
      > & { functionName?: 'checkTransaction' }
    : UseContractWriteConfig<typeof guardABI, 'checkTransaction', TMode> & {
        abi?: never
        functionName?: 'checkTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, 'checkTransaction', TMode>({
    abi: guardABI,
    functionName: 'checkTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function usePrepareGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, 'checkAfterExecution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, 'checkAfterExecution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, 'checkTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: 'checkTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, 'checkTransaction'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, TFunctionName, TMode>({
    abi: guardManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function useGuardManagerSetGuard<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          'setGuard'
        >['request']['abi'],
        'setGuard',
        TMode
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<typeof guardManagerABI, 'setGuard', TMode> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, 'setGuard', TMode>({
    abi: guardManagerABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function usePrepareGuardManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareGuardManagerSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, 'setGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useGuardManagerChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721EnumerableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721EnumerableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, TFunctionName, TMode>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721EnumerableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'approve', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721EnumerableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721EnumerableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721EnumerableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721EnumerableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721EnumerableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'transferFrom', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721EnumerableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721EnumerableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721EnumerableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, TFunctionName, TMode>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'approve', TMode>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'safeTransferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'setApprovalForAll', TMode>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'transferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, TFunctionName, TMode>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'approve', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'safeTransferFrom', TMode>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'transferFrom', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, TFunctionName, TMode>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, 'onERC721Received', TMode>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'aggregate3Value',
        TMode
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function useIProxyCreationCallbackWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    TFunctionName,
    TMode
  >({ abi: iProxyCreationCallbackABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function useIProxyCreationCallbackProxyCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          'proxyCreated'
        >['request']['abi'],
        'proxyCreated',
        TMode
      > & { functionName?: 'proxyCreated' }
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        'proxyCreated',
        TMode
      > & {
        abi?: never
        functionName?: 'proxyCreated'
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    'proxyCreated',
    TMode
  >({
    abi: iProxyCreationCallbackABI,
    functionName: 'proxyCreated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function usePrepareIProxyCreationCallbackWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProxyCreationCallbackABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function usePrepareIProxyCreationCallbackProxyCreated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      'proxyCreated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    functionName: 'proxyCreated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iProxyCreationCallbackABI,
    'proxyCreated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__.
 */
export function useISignatureValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSignatureValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useISignatureValidatorIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof iSignatureValidatorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMockErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMockErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"name"`.
 */
export function useMockErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMockErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMockErc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useMockErc721TokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useMockErc721TokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMockErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockErc721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof mockErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof mockErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockErc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, TFunctionName, TMode>({
    abi: mockErc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useMockErc721Approve<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof mockErc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'approve', TMode>({
    abi: mockErc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"burn"`.
 */
export function useMockErc721Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof mockErc721ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'burn', TMode>({
    abi: mockErc721ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function useMockErc721Mint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof mockErc721ABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'mint', TMode>({
    abi: mockErc721ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeMint"`.
 */
export function useMockErc721SafeMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'safeMint'
        >['request']['abi'],
        'safeMint',
        TMode
      > & { functionName?: 'safeMint' }
    : UseContractWriteConfig<typeof mockErc721ABI, 'safeMint', TMode> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'safeMint', TMode>({
    abi: mockErc721ABI,
    functionName: 'safeMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMockErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof mockErc721ABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'safeTransferFrom', TMode>({
    abi: mockErc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMockErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof mockErc721ABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'setApprovalForAll', TMode>({
    abi: mockErc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockErc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockErc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof mockErc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof mockErc721ABI, 'transferFrom', TMode>({
    abi: mockErc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function usePrepareMockErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockErc721Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockErc721Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareMockErc721SafeMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'safeMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'safeMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'safeMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMockErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMockErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__.
 */
export function useMockErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMockErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mockErc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useModuleManagerGetModulesPaginated<
  TFunctionName extends 'getModulesPaginated',
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: 'getModulesPaginated',
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useModuleManagerIsModuleEnabled<
  TFunctionName extends 'isModuleEnabled',
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: 'isModuleEnabled',
    ...config,
  } as UseContractReadConfig<
    typeof moduleManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof moduleManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, TFunctionName, TMode>({
    abi: moduleManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function useModuleManagerDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'disableModule'
        >['request']['abi'],
        'disableModule',
        TMode
      > & { functionName?: 'disableModule' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'disableModule',
        TMode
      > & {
        abi?: never
        functionName?: 'disableModule'
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, 'disableModule', TMode>({
    abi: moduleManagerABI,
    functionName: 'disableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function useModuleManagerEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'enableModule'
        >['request']['abi'],
        'enableModule',
        TMode
      > & { functionName?: 'enableModule' }
    : UseContractWriteConfig<typeof moduleManagerABI, 'enableModule', TMode> & {
        abi?: never
        functionName?: 'enableModule'
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, 'enableModule', TMode>({
    abi: moduleManagerABI,
    functionName: 'enableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useModuleManagerExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'execTransactionFromModule'
        >['request']['abi'],
        'execTransactionFromModule',
        TMode
      > & { functionName?: 'execTransactionFromModule' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'execTransactionFromModule',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModule'
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    'execTransactionFromModule',
    TMode
  >({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useModuleManagerExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          'execTransactionFromModuleReturnData'
        >['request']['abi'],
        'execTransactionFromModuleReturnData',
        TMode
      > & { functionName?: 'execTransactionFromModuleReturnData' }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        'execTransactionFromModuleReturnData',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModuleReturnData'
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    'execTransactionFromModuleReturnData',
    TMode
  >({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function usePrepareModuleManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareModuleManagerDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, 'disableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'disableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, 'disableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareModuleManagerEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, 'enableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'enableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, 'enableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareModuleManagerExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      'execTransactionFromModule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof moduleManagerABI,
    'execTransactionFromModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareModuleManagerExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      'execTransactionFromModuleReturnData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof moduleManagerABI,
    'execTransactionFromModuleReturnData'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useModuleManagerDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, 'DisabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'DisabledModule',
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, 'DisabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useModuleManagerEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, 'EnabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'EnabledModule',
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, 'EnabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useModuleManagerExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      'ExecutionFromModuleFailure'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'ExecutionFromModuleFailure',
    ...config,
  } as UseContractEventConfig<
    typeof moduleManagerABI,
    'ExecutionFromModuleFailure'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useModuleManagerExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      'ExecutionFromModuleSuccess'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: 'ExecutionFromModuleSuccess',
    ...config,
  } as UseContractEventConfig<
    typeof moduleManagerABI,
    'ExecutionFromModuleSuccess'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeABI}__.
 */
export function useISafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSafeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iSafeABI, ...config } as UseContractReadConfig<
    typeof iSafeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeABI}__ and `functionName` set to `"getOwners"`.
 */
export function useISafeGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof iSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof iSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftGuardABI}__.
 */
export function useNftGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof nftGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftGuardABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: nftGuardABI,
    ...config,
  } as UseContractReadConfig<typeof nftGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nftGuardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useNftGuardSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof nftGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof nftGuardABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: nftGuardABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof nftGuardABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftGuardABI}__.
 */
export function useNftGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftGuardABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof nftGuardABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof nftGuardABI, TFunctionName, TMode>({
    abi: nftGuardABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useNftGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftGuardABI,
          'checkAfterExecution'
        >['request']['abi'],
        'checkAfterExecution',
        TMode
      > & { functionName?: 'checkAfterExecution' }
    : UseContractWriteConfig<
        typeof nftGuardABI,
        'checkAfterExecution',
        TMode
      > & {
        abi?: never
        functionName?: 'checkAfterExecution'
      } = {} as any,
) {
  return useContractWrite<typeof nftGuardABI, 'checkAfterExecution', TMode>({
    abi: nftGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nftGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useNftGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nftGuardABI,
          'checkTransaction'
        >['request']['abi'],
        'checkTransaction',
        TMode
      > & { functionName?: 'checkTransaction' }
    : UseContractWriteConfig<typeof nftGuardABI, 'checkTransaction', TMode> & {
        abi?: never
        functionName?: 'checkTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof nftGuardABI, 'checkTransaction', TMode>({
    abi: nftGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftGuardABI}__.
 */
export function usePrepareNftGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftGuardABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftGuardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftGuardABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareNftGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftGuardABI, 'checkAfterExecution'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftGuardABI,
    functionName: 'checkAfterExecution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftGuardABI, 'checkAfterExecution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nftGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareNftGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof nftGuardABI, 'checkTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: nftGuardABI,
    functionName: 'checkTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof nftGuardABI, 'checkTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__.
 */
export function useNativeCurrencyPaymentFallbackEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof nativeCurrencyPaymentFallbackABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    ...config,
  } as UseContractEventConfig<
    typeof nativeCurrencyPaymentFallbackABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useNativeCurrencyPaymentFallbackSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nativeCurrencyPaymentFallbackABI,
      'SafeReceived'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    eventName: 'SafeReceived',
    ...config,
  } as UseContractEventConfig<
    typeof nativeCurrencyPaymentFallbackABI,
    'SafeReceived'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getOwners"`.
 */
export function useOwnerManagerGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useOwnerManagerGetThreshold<
  TFunctionName extends 'getThreshold',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'getThreshold',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useOwnerManagerIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<
    typeof ownerManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownerManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, TFunctionName, TMode>({
    abi: ownerManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useOwnerManagerAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'addOwnerWithThreshold'
        >['request']['abi'],
        'addOwnerWithThreshold',
        TMode
      > & { functionName?: 'addOwnerWithThreshold' }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        'addOwnerWithThreshold',
        TMode
      > & {
        abi?: never
        functionName?: 'addOwnerWithThreshold'
      } = {} as any,
) {
  return useContractWrite<
    typeof ownerManagerABI,
    'addOwnerWithThreshold',
    TMode
  >({
    abi: ownerManagerABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useOwnerManagerChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'changeThreshold'
        >['request']['abi'],
        'changeThreshold',
        TMode
      > & { functionName?: 'changeThreshold' }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        'changeThreshold',
        TMode
      > & {
        abi?: never
        functionName?: 'changeThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'changeThreshold', TMode>({
    abi: ownerManagerABI,
    functionName: 'changeThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useOwnerManagerRemoveOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof ownerManagerABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'removeOwner', TMode>({
    abi: ownerManagerABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useOwnerManagerSwapOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          'swapOwner'
        >['request']['abi'],
        'swapOwner',
        TMode
      > & { functionName?: 'swapOwner' }
    : UseContractWriteConfig<typeof ownerManagerABI, 'swapOwner', TMode> & {
        abi?: never
        functionName?: 'swapOwner'
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, 'swapOwner', TMode>({
    abi: ownerManagerABI,
    functionName: 'swapOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function usePrepareOwnerManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareOwnerManagerAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownerManagerABI,
      'addOwnerWithThreshold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownerManagerABI,
    'addOwnerWithThreshold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareOwnerManagerChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'changeThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'changeThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'changeThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareOwnerManagerRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareOwnerManagerSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, 'swapOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: 'swapOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, 'swapOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useOwnerManagerAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'AddedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'AddedOwner',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useOwnerManagerChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'ChangedThreshold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'ChangedThreshold',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'ChangedThreshold'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useOwnerManagerRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, 'RemovedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: 'RemovedOwner',
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__.
 */
export function usePositionDelegationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePositionDelegationBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePositionDelegationGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"getSafeAddressForUser"`.
 */
export function usePositionDelegationGetSafeAddressForUser<
  TFunctionName extends 'getSafeAddressForUser',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'getSafeAddressForUser',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePositionDelegationIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"name"`.
 */
export function usePositionDelegationName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePositionDelegationOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"safeToTokenIds"`.
 */
export function usePositionDelegationSafeToTokenIds<
  TFunctionName extends 'safeToTokenIds',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'safeToTokenIds',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePositionDelegationSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"symbol"`.
 */
export function usePositionDelegationSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function usePositionDelegationTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"tokenIdToSafe"`.
 */
export function usePositionDelegationTokenIdToSafe<
  TFunctionName extends 'tokenIdToSafe',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'tokenIdToSafe',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function usePositionDelegationTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePositionDelegationTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePositionDelegationTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"userToSafe"`.
 */
export function usePositionDelegationUserToSafe<
  TFunctionName extends 'userToSafe',
  TSelectData = ReadContractResult<typeof positionDelegationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof positionDelegationABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: positionDelegationABI,
    functionName: 'userToSafe',
    ...config,
  } as UseContractReadConfig<
    typeof positionDelegationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__.
 */
export function usePositionDelegationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof positionDelegationABI, TFunctionName, TMode>({
    abi: positionDelegationABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"approve"`.
 */
export function usePositionDelegationApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof positionDelegationABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof positionDelegationABI, 'approve', TMode>({
    abi: positionDelegationABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"delegate"`.
 */
export function usePositionDelegationDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        'delegate',
        TMode
      > & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof positionDelegationABI, 'delegate', TMode>({
    abi: positionDelegationABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"getOrCreateSafe"`.
 */
export function usePositionDelegationGetOrCreateSafe<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'getOrCreateSafe'
        >['request']['abi'],
        'getOrCreateSafe',
        TMode
      > & { functionName?: 'getOrCreateSafe' }
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        'getOrCreateSafe',
        TMode
      > & {
        abi?: never
        functionName?: 'getOrCreateSafe'
      } = {} as any,
) {
  return useContractWrite<
    typeof positionDelegationABI,
    'getOrCreateSafe',
    TMode
  >({
    abi: positionDelegationABI,
    functionName: 'getOrCreateSafe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePositionDelegationSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof positionDelegationABI,
    'safeTransferFrom',
    TMode
  >({
    abi: positionDelegationABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePositionDelegationSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof positionDelegationABI,
    'setApprovalForAll',
    TMode
  >({
    abi: positionDelegationABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePositionDelegationTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof positionDelegationABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof positionDelegationABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof positionDelegationABI, 'transferFrom', TMode>({
    abi: positionDelegationABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__.
 */
export function usePreparePositionDelegationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof positionDelegationABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof positionDelegationABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePositionDelegationApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof positionDelegationABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof positionDelegationABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"delegate"`.
 */
export function usePreparePositionDelegationDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof positionDelegationABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof positionDelegationABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"getOrCreateSafe"`.
 */
export function usePreparePositionDelegationGetOrCreateSafe(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof positionDelegationABI,
      'getOrCreateSafe'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'getOrCreateSafe',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof positionDelegationABI,
    'getOrCreateSafe'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePositionDelegationSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof positionDelegationABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof positionDelegationABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePositionDelegationSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof positionDelegationABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof positionDelegationABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link positionDelegationABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePositionDelegationTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof positionDelegationABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: positionDelegationABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof positionDelegationABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link positionDelegationABI}__.
 */
export function usePositionDelegationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof positionDelegationABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: positionDelegationABI,
    ...config,
  } as UseContractEventConfig<typeof positionDelegationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link positionDelegationABI}__ and `eventName` set to `"Approval"`.
 */
export function usePositionDelegationApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof positionDelegationABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: positionDelegationABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof positionDelegationABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link positionDelegationABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePositionDelegationApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof positionDelegationABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: positionDelegationABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof positionDelegationABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link positionDelegationABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePositionDelegationTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof positionDelegationABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: positionDelegationABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof positionDelegationABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: safeABI, ...config } as UseContractReadConfig<
    typeof safeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"VERSION"`.
 */
export function useSafeVersion<
  TFunctionName extends 'VERSION',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'VERSION',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approvedHashes"`.
 */
export function useSafeApprovedHashes<
  TFunctionName extends 'approvedHashes',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'approvedHashes',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkNSignatures"`.
 */
export function useSafeCheckNSignatures<
  TFunctionName extends 'checkNSignatures',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'checkNSignatures',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkSignatures"`.
 */
export function useSafeCheckSignatures<
  TFunctionName extends 'checkSignatures',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'checkSignatures',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"domainSeparator"`.
 */
export function useSafeDomainSeparator<
  TFunctionName extends 'domainSeparator',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'domainSeparator',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"encodeTransactionData"`.
 */
export function useSafeEncodeTransactionData<
  TFunctionName extends 'encodeTransactionData',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'encodeTransactionData',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getChainId"`.
 */
export function useSafeGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useSafeGetModulesPaginated<
  TFunctionName extends 'getModulesPaginated',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getModulesPaginated',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getOwners"`.
 */
export function useSafeGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useSafeGetStorageAt<
  TFunctionName extends 'getStorageAt',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getStorageAt',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useSafeGetThreshold<
  TFunctionName extends 'getThreshold',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getThreshold',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getTransactionHash"`.
 */
export function useSafeGetTransactionHash<
  TFunctionName extends 'getTransactionHash',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'getTransactionHash',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useSafeIsModuleEnabled<
  TFunctionName extends 'isModuleEnabled',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'isModuleEnabled',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isOwner"`.
 */
export function useSafeIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"nonce"`.
 */
export function useSafeNonce<
  TFunctionName extends 'nonce',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"signedMessages"`.
 */
export function useSafeSignedMessages<
  TFunctionName extends 'signedMessages',
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: 'signedMessages',
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof safeABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, TFunctionName, TMode>({
    abi: safeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useSafeAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'addOwnerWithThreshold'
        >['request']['abi'],
        'addOwnerWithThreshold',
        TMode
      > & { functionName?: 'addOwnerWithThreshold' }
    : UseContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold', TMode> & {
        abi?: never
        functionName?: 'addOwnerWithThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'addOwnerWithThreshold', TMode>({
    abi: safeABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function useSafeApproveHash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'approveHash'
        >['request']['abi'],
        'approveHash',
        TMode
      > & { functionName?: 'approveHash' }
    : UseContractWriteConfig<typeof safeABI, 'approveHash', TMode> & {
        abi?: never
        functionName?: 'approveHash'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'approveHash', TMode>({
    abi: safeABI,
    functionName: 'approveHash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useSafeChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'changeThreshold'
        >['request']['abi'],
        'changeThreshold',
        TMode
      > & { functionName?: 'changeThreshold' }
    : UseContractWriteConfig<typeof safeABI, 'changeThreshold', TMode> & {
        abi?: never
        functionName?: 'changeThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'changeThreshold', TMode>({
    abi: safeABI,
    functionName: 'changeThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function useSafeDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'disableModule'
        >['request']['abi'],
        'disableModule',
        TMode
      > & { functionName?: 'disableModule' }
    : UseContractWriteConfig<typeof safeABI, 'disableModule', TMode> & {
        abi?: never
        functionName?: 'disableModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'disableModule', TMode>({
    abi: safeABI,
    functionName: 'disableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function useSafeEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'enableModule'
        >['request']['abi'],
        'enableModule',
        TMode
      > & { functionName?: 'enableModule' }
    : UseContractWriteConfig<typeof safeABI, 'enableModule', TMode> & {
        abi?: never
        functionName?: 'enableModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'enableModule', TMode>({
    abi: safeABI,
    functionName: 'enableModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function useSafeExecTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransaction'
        >['request']['abi'],
        'execTransaction',
        TMode
      > & { functionName?: 'execTransaction' }
    : UseContractWriteConfig<typeof safeABI, 'execTransaction', TMode> & {
        abi?: never
        functionName?: 'execTransaction'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'execTransaction', TMode>({
    abi: safeABI,
    functionName: 'execTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useSafeExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransactionFromModule'
        >['request']['abi'],
        'execTransactionFromModule',
        TMode
      > & { functionName?: 'execTransactionFromModule' }
    : UseContractWriteConfig<
        typeof safeABI,
        'execTransactionFromModule',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModule'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'execTransactionFromModule', TMode>({
    abi: safeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useSafeExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'execTransactionFromModuleReturnData'
        >['request']['abi'],
        'execTransactionFromModuleReturnData',
        TMode
      > & { functionName?: 'execTransactionFromModuleReturnData' }
    : UseContractWriteConfig<
        typeof safeABI,
        'execTransactionFromModuleReturnData',
        TMode
      > & {
        abi?: never
        functionName?: 'execTransactionFromModuleReturnData'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeABI,
    'execTransactionFromModuleReturnData',
    TMode
  >({
    abi: safeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useSafeRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof safeABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'removeOwner', TMode>({
    abi: safeABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useSafeSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'setFallbackHandler'
        >['request']['abi'],
        'setFallbackHandler',
        TMode
      > & { functionName?: 'setFallbackHandler' }
    : UseContractWriteConfig<typeof safeABI, 'setFallbackHandler', TMode> & {
        abi?: never
        functionName?: 'setFallbackHandler'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setFallbackHandler', TMode>({
    abi: safeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function useSafeSetGuard<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'setGuard'
        >['request']['abi'],
        'setGuard',
        TMode
      > & { functionName?: 'setGuard' }
    : UseContractWriteConfig<typeof safeABI, 'setGuard', TMode> & {
        abi?: never
        functionName?: 'setGuard'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setGuard', TMode>({
    abi: safeABI,
    functionName: 'setGuard',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function useSafeSetup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, 'setup'>['request']['abi'],
        'setup',
        TMode
      > & { functionName?: 'setup' }
    : UseContractWriteConfig<typeof safeABI, 'setup', TMode> & {
        abi?: never
        functionName?: 'setup'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'setup', TMode>({
    abi: safeABI,
    functionName: 'setup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useSafeSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'simulateAndRevert'
        >['request']['abi'],
        'simulateAndRevert',
        TMode
      > & { functionName?: 'simulateAndRevert' }
    : UseContractWriteConfig<typeof safeABI, 'simulateAndRevert', TMode> & {
        abi?: never
        functionName?: 'simulateAndRevert'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'simulateAndRevert', TMode>({
    abi: safeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useSafeSwapOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          'swapOwner'
        >['request']['abi'],
        'swapOwner',
        TMode
      > & { functionName?: 'swapOwner' }
    : UseContractWriteConfig<typeof safeABI, 'swapOwner', TMode> & {
        abi?: never
        functionName?: 'swapOwner'
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, 'swapOwner', TMode>({
    abi: safeABI,
    functionName: 'swapOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function usePrepareSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareSafeAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'addOwnerWithThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'addOwnerWithThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function usePrepareSafeApproveHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'approveHash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'approveHash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'approveHash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareSafeChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'changeThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'changeThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'changeThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareSafeDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'disableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'disableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'disableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareSafeEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'enableModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'enableModule',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'enableModule'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function usePrepareSafeExecTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'execTransaction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'execTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareSafeExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'execTransactionFromModule'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransactionFromModule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeABI,
    'execTransactionFromModule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareSafeExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeABI,
      'execTransactionFromModuleReturnData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'execTransactionFromModuleReturnData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeABI,
    'execTransactionFromModuleReturnData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareSafeRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareSafeSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setFallbackHandler'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setFallbackHandler',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setFallbackHandler'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareSafeSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setGuard'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setGuard',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setGuard'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function usePrepareSafeSetup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'setup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'setup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'setup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareSafeSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'simulateAndRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'simulateAndRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareSafeSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, 'swapOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: 'swapOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, 'swapOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: safeABI, ...config } as UseContractEventConfig<
    typeof safeABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useSafeAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'AddedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'AddedOwner',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'AddedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ApproveHash"`.
 */
export function useSafeApproveHashEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ApproveHash'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ApproveHash',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ApproveHash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useSafeChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedFallbackHandler'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedFallbackHandler',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedFallbackHandler'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useSafeChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedGuard'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedGuard',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedGuard'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useSafeChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ChangedThreshold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ChangedThreshold',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ChangedThreshold'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useSafeDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'DisabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'DisabledModule',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'DisabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useSafeEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'EnabledModule'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'EnabledModule',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'EnabledModule'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFailure"`.
 */
export function useSafeExecutionFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFailure',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useSafeExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleFailure'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFromModuleFailure',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useSafeExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionFromModuleSuccess',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionFromModuleSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionSuccess"`.
 */
export function useSafeExecutionSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'ExecutionSuccess'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'ExecutionSuccess',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'ExecutionSuccess'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useSafeRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'RemovedOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'RemovedOwner',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'RemovedOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useSafeSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SafeReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SafeReceived',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SafeReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeSetup"`.
 */
export function useSafeSafeSetupEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SafeSetup'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SafeSetup',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SafeSetup'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SignMsg"`.
 */
export function useSafeSignMsgEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, 'SignMsg'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: 'SignMsg',
    ...config,
  } as UseContractEventConfig<typeof safeABI, 'SignMsg'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__.
 */
export function useIProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iProxyABI, ...config } as UseContractReadConfig<
    typeof iProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__ and `functionName` set to `"masterCopy"`.
 */
export function useIProxyMasterCopy<
  TFunctionName extends 'masterCopy',
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iProxyABI,
    functionName: 'masterCopy',
    ...config,
  } as UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"getChainId"`.
 */
export function useSafeProxyFactoryGetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"proxyCreationCode"`.
 */
export function useSafeProxyFactoryProxyCreationCode<
  TFunctionName extends 'proxyCreationCode',
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: 'proxyCreationCode',
    ...config,
  } as UseContractReadConfig<
    typeof safeProxyFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof safeProxyFactoryABI, TFunctionName, TMode>({
    abi: safeProxyFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateChainSpecificProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createChainSpecificProxyWithNonce'
        >['request']['abi'],
        'createChainSpecificProxyWithNonce',
        TMode
      > & { functionName?: 'createChainSpecificProxyWithNonce' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createChainSpecificProxyWithNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'createChainSpecificProxyWithNonce'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createChainSpecificProxyWithNonce',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createChainSpecificProxyWithNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function useSafeProxyFactoryCreateProxyWithCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createProxyWithCallback'
        >['request']['abi'],
        'createProxyWithCallback',
        TMode
      > & { functionName?: 'createProxyWithCallback' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createProxyWithCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'createProxyWithCallback'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createProxyWithCallback',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          'createProxyWithNonce'
        >['request']['abi'],
        'createProxyWithNonce',
        TMode
      > & { functionName?: 'createProxyWithNonce' }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        'createProxyWithNonce',
        TMode
      > & {
        abi?: never
        functionName?: 'createProxyWithNonce'
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    'createProxyWithNonce',
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function usePrepareSafeProxyFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateChainSpecificProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createChainSpecificProxyWithNonce'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createChainSpecificProxyWithNonce',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createChainSpecificProxyWithNonce'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createProxyWithCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createProxyWithCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      'createProxyWithNonce'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: 'createProxyWithNonce',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof safeProxyFactoryABI,
    'createProxyWithNonce'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `eventName` set to `"ProxyCreation"`.
 */
export function useSafeProxyFactoryProxyCreationEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, 'ProxyCreation'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    eventName: 'ProxyCreation',
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, 'ProxyCreation'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScriptRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof scriptABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: scriptABI, ...config } as UseContractReadConfig<
    typeof scriptABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useScriptIsScript<
  TFunctionName extends 'IS_SCRIPT',
  TSelectData = ReadContractResult<typeof scriptABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: scriptABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof scriptABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"SlotFound"`.
 */
export function useStdStorageSafeSlotFoundEvent(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, 'SlotFound'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'SlotFound',
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, 'SlotFound'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"WARNING_UninitedSlot"`.
 */
export function useStdStorageSafeWarningUninitedSlotEvent(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'WARNING_UninitedSlot',
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    ...config,
  } as UseContractReadConfig<
    typeof storageAccessibleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useStorageAccessibleGetStorageAt<
  TFunctionName extends 'getStorageAt',
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    functionName: 'getStorageAt',
    ...config,
  } as UseContractReadConfig<
    typeof storageAccessibleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof storageAccessibleABI, TFunctionName, TMode>({
    abi: storageAccessibleABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useStorageAccessibleSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          'simulateAndRevert'
        >['request']['abi'],
        'simulateAndRevert',
        TMode
      > & { functionName?: 'simulateAndRevert' }
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        'simulateAndRevert',
        TMode
      > & {
        abi?: never
        functionName?: 'simulateAndRevert'
      } = {} as any,
) {
  return useContractWrite<
    typeof storageAccessibleABI,
    'simulateAndRevert',
    TMode
  >({
    abi: storageAccessibleABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function usePrepareStorageAccessibleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageAccessibleABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof storageAccessibleABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareStorageAccessibleSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof storageAccessibleABI,
      'simulateAndRevert'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    functionName: 'simulateAndRevert',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof storageAccessibleABI,
    'simulateAndRevert'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vmABI, ...config } as UseContractReadConfig<
    typeof vmABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"activeFork"`.
 */
export function useVmActiveFork<
  TFunctionName extends 'activeFork',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'activeFork',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"addr"`.
 */
export function useVmAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"assume"`.
 */
export function useVmAssume<
  TFunctionName extends 'assume',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'assume',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmDeriveKey<
  TFunctionName extends 'deriveKey',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'deriveKey',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmEnvAddress<
  TFunctionName extends 'envAddress',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envAddress',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmEnvBool<
  TFunctionName extends 'envBool',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBool',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmEnvBytes<
  TFunctionName extends 'envBytes',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBytes',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmEnvBytes32<
  TFunctionName extends 'envBytes32',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmEnvInt<
  TFunctionName extends 'envInt',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envInt',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envString"`.
 */
export function useVmEnvString<
  TFunctionName extends 'envString',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envString',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmEnvUint<
  TFunctionName extends 'envUint',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envUint',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function useVmFsMetadata<
  TFunctionName extends 'fsMetadata',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'fsMetadata',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmGetCode<
  TFunctionName extends 'getCode',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getCode',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmGetDeployedCode<
  TFunctionName extends 'getDeployedCode',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getDeployedCode',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isPersistent"`.
 */
export function useVmIsPersistent<
  TFunctionName extends 'isPersistent',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'isPersistent',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"load"`.
 */
export function useVmLoad<
  TFunctionName extends 'load',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'load',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmParseAddress<
  TFunctionName extends 'parseAddress',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseAddress',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmParseBool<
  TFunctionName extends 'parseBool',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBool',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmParseBytes<
  TFunctionName extends 'parseBytes',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBytes',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmParseBytes32<
  TFunctionName extends 'parseBytes32',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmParseInt<
  TFunctionName extends 'parseInt',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseInt',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmParseJson<
  TFunctionName extends 'parseJson',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseJson',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmParseUint<
  TFunctionName extends 'parseUint',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseUint',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmProjectRoot<
  TFunctionName extends 'projectRoot',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'projectRoot',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readDir"`.
 */
export function useVmReadDir<
  TFunctionName extends 'readDir',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readDir',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmReadFile<
  TFunctionName extends 'readFile',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readFile',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmReadFileBinary<
  TFunctionName extends 'readFileBinary',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readFileBinary',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmReadLine<
  TFunctionName extends 'readLine',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readLine',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLink"`.
 */
export function useVmReadLink<
  TFunctionName extends 'readLink',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readLink',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmRpcUrl<
  TFunctionName extends 'rpcUrl',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrl',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmRpcUrlStructs<
  TFunctionName extends 'rpcUrlStructs',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrlStructs',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmRpcUrls<
  TFunctionName extends 'rpcUrls',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrls',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSign<
  TFunctionName extends 'sign',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'sign',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"toString"`.
 */
export function useVmToString<
  TFunctionName extends 'toString',
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'toString',
    ...config,
  } as UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof vmABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, TFunctionName, TMode>({
    abi: vmABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmAccesses<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'accesses'>['request']['abi'],
        'accesses',
        TMode
      > & { functionName?: 'accesses' }
    : UseContractWriteConfig<typeof vmABI, 'accesses', TMode> & {
        abi?: never
        functionName?: 'accesses'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'accesses', TMode>({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function useVmAllowCheatcodes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'allowCheatcodes'
        >['request']['abi'],
        'allowCheatcodes',
        TMode
      > & { functionName?: 'allowCheatcodes' }
    : UseContractWriteConfig<typeof vmABI, 'allowCheatcodes', TMode> & {
        abi?: never
        functionName?: 'allowCheatcodes'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'allowCheatcodes', TMode>({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"breakpoint"`.
 */
export function useVmBreakpoint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'breakpoint'
        >['request']['abi'],
        'breakpoint',
        TMode
      > & { functionName?: 'breakpoint' }
    : UseContractWriteConfig<typeof vmABI, 'breakpoint', TMode> & {
        abi?: never
        functionName?: 'breakpoint'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'breakpoint', TMode>({
    abi: vmABI,
    functionName: 'breakpoint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmBroadcast<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'broadcast'>['request']['abi'],
        'broadcast',
        TMode
      > & { functionName?: 'broadcast' }
    : UseContractWriteConfig<typeof vmABI, 'broadcast', TMode> & {
        abi?: never
        functionName?: 'broadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'broadcast', TMode>({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function useVmChainId<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'chainId'>['request']['abi'],
        'chainId',
        TMode
      > & { functionName?: 'chainId' }
    : UseContractWriteConfig<typeof vmABI, 'chainId', TMode> & {
        abi?: never
        functionName?: 'chainId'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'chainId', TMode>({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function useVmClearMockedCalls<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'clearMockedCalls'
        >['request']['abi'],
        'clearMockedCalls',
        TMode
      > & { functionName?: 'clearMockedCalls' }
    : UseContractWriteConfig<typeof vmABI, 'clearMockedCalls', TMode> & {
        abi?: never
        functionName?: 'clearMockedCalls'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'clearMockedCalls', TMode>({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmCloseFile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'closeFile'>['request']['abi'],
        'closeFile',
        TMode
      > & { functionName?: 'closeFile' }
    : UseContractWriteConfig<typeof vmABI, 'closeFile', TMode> & {
        abi?: never
        functionName?: 'closeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'closeFile', TMode>({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function useVmCoinbase<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'coinbase'>['request']['abi'],
        'coinbase',
        TMode
      > & { functionName?: 'coinbase' }
    : UseContractWriteConfig<typeof vmABI, 'coinbase', TMode> & {
        abi?: never
        functionName?: 'coinbase'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'coinbase', TMode>({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createDir"`.
 */
export function useVmCreateDir<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'createDir'>['request']['abi'],
        'createDir',
        TMode
      > & { functionName?: 'createDir' }
    : UseContractWriteConfig<typeof vmABI, 'createDir', TMode> & {
        abi?: never
        functionName?: 'createDir'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'createDir', TMode>({
    abi: vmABI,
    functionName: 'createDir',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function useVmCreateFork<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'createFork'
        >['request']['abi'],
        'createFork',
        TMode
      > & { functionName?: 'createFork' }
    : UseContractWriteConfig<typeof vmABI, 'createFork', TMode> & {
        abi?: never
        functionName?: 'createFork'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'createFork', TMode>({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function useVmCreateSelectFork<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'createSelectFork'
        >['request']['abi'],
        'createSelectFork',
        TMode
      > & { functionName?: 'createSelectFork' }
    : UseContractWriteConfig<typeof vmABI, 'createSelectFork', TMode> & {
        abi?: never
        functionName?: 'createSelectFork'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'createSelectFork', TMode>({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function useVmDeal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'deal'>['request']['abi'],
        'deal',
        TMode
      > & { functionName?: 'deal' }
    : UseContractWriteConfig<typeof vmABI, 'deal', TMode> & {
        abi?: never
        functionName?: 'deal'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'deal', TMode>({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function useVmDifficulty<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'difficulty'
        >['request']['abi'],
        'difficulty',
        TMode
      > & { functionName?: 'difficulty' }
    : UseContractWriteConfig<typeof vmABI, 'difficulty', TMode> & {
        abi?: never
        functionName?: 'difficulty'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'difficulty', TMode>({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmEnvOr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'envOr'>['request']['abi'],
        'envOr',
        TMode
      > & { functionName?: 'envOr' }
    : UseContractWriteConfig<typeof vmABI, 'envOr', TMode> & {
        abi?: never
        functionName?: 'envOr'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'envOr', TMode>({
    abi: vmABI,
    functionName: 'envOr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function useVmEtch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'etch'>['request']['abi'],
        'etch',
        TMode
      > & { functionName?: 'etch' }
    : UseContractWriteConfig<typeof vmABI, 'etch', TMode> & {
        abi?: never
        functionName?: 'etch'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'etch', TMode>({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function useVmExpectCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectCall'
        >['request']['abi'],
        'expectCall',
        TMode
      > & { functionName?: 'expectCall' }
    : UseContractWriteConfig<typeof vmABI, 'expectCall', TMode> & {
        abi?: never
        functionName?: 'expectCall'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectCall', TMode>({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCallMinGas"`.
 */
export function useVmExpectCallMinGas<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectCallMinGas'
        >['request']['abi'],
        'expectCallMinGas',
        TMode
      > & { functionName?: 'expectCallMinGas' }
    : UseContractWriteConfig<typeof vmABI, 'expectCallMinGas', TMode> & {
        abi?: never
        functionName?: 'expectCallMinGas'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectCallMinGas', TMode>({
    abi: vmABI,
    functionName: 'expectCallMinGas',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function useVmExpectEmit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectEmit'
        >['request']['abi'],
        'expectEmit',
        TMode
      > & { functionName?: 'expectEmit' }
    : UseContractWriteConfig<typeof vmABI, 'expectEmit', TMode> & {
        abi?: never
        functionName?: 'expectEmit'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectEmit', TMode>({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function useVmExpectRevert<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectRevert'
        >['request']['abi'],
        'expectRevert',
        TMode
      > & { functionName?: 'expectRevert' }
    : UseContractWriteConfig<typeof vmABI, 'expectRevert', TMode> & {
        abi?: never
        functionName?: 'expectRevert'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectRevert', TMode>({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemory"`.
 */
export function useVmExpectSafeMemory<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectSafeMemory'
        >['request']['abi'],
        'expectSafeMemory',
        TMode
      > & { functionName?: 'expectSafeMemory' }
    : UseContractWriteConfig<typeof vmABI, 'expectSafeMemory', TMode> & {
        abi?: never
        functionName?: 'expectSafeMemory'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectSafeMemory', TMode>({
    abi: vmABI,
    functionName: 'expectSafeMemory',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemoryCall"`.
 */
export function useVmExpectSafeMemoryCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'expectSafeMemoryCall'
        >['request']['abi'],
        'expectSafeMemoryCall',
        TMode
      > & { functionName?: 'expectSafeMemoryCall' }
    : UseContractWriteConfig<typeof vmABI, 'expectSafeMemoryCall', TMode> & {
        abi?: never
        functionName?: 'expectSafeMemoryCall'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'expectSafeMemoryCall', TMode>({
    abi: vmABI,
    functionName: 'expectSafeMemoryCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function useVmFee<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'fee'>['request']['abi'],
        'fee',
        TMode
      > & { functionName?: 'fee' }
    : UseContractWriteConfig<typeof vmABI, 'fee', TMode> & {
        abi?: never
        functionName?: 'fee'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'fee', TMode>({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmFfi<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'ffi'>['request']['abi'],
        'ffi',
        TMode
      > & { functionName?: 'ffi' }
    : UseContractWriteConfig<typeof vmABI, 'ffi', TMode> & {
        abi?: never
        functionName?: 'ffi'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'ffi', TMode>({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getLabel"`.
 */
export function useVmGetLabel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'getLabel'>['request']['abi'],
        'getLabel',
        TMode
      > & { functionName?: 'getLabel' }
    : UseContractWriteConfig<typeof vmABI, 'getLabel', TMode> & {
        abi?: never
        functionName?: 'getLabel'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'getLabel', TMode>({
    abi: vmABI,
    functionName: 'getLabel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmGetRecordedLogs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'getRecordedLogs'
        >['request']['abi'],
        'getRecordedLogs',
        TMode
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<typeof vmABI, 'getRecordedLogs', TMode> & {
        abi?: never
        functionName?: 'getRecordedLogs'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'getRecordedLogs', TMode>({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function useVmLabel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'label'>['request']['abi'],
        'label',
        TMode
      > & { functionName?: 'label' }
    : UseContractWriteConfig<typeof vmABI, 'label', TMode> & {
        abi?: never
        functionName?: 'label'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'label', TMode>({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function useVmMakePersistent<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'makePersistent'
        >['request']['abi'],
        'makePersistent',
        TMode
      > & { functionName?: 'makePersistent' }
    : UseContractWriteConfig<typeof vmABI, 'makePersistent', TMode> & {
        abi?: never
        functionName?: 'makePersistent'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'makePersistent', TMode>({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function useVmMockCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'mockCall'>['request']['abi'],
        'mockCall',
        TMode
      > & { functionName?: 'mockCall' }
    : UseContractWriteConfig<typeof vmABI, 'mockCall', TMode> & {
        abi?: never
        functionName?: 'mockCall'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'mockCall', TMode>({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCallRevert"`.
 */
export function useVmMockCallRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'mockCallRevert'
        >['request']['abi'],
        'mockCallRevert',
        TMode
      > & { functionName?: 'mockCallRevert' }
    : UseContractWriteConfig<typeof vmABI, 'mockCallRevert', TMode> & {
        abi?: never
        functionName?: 'mockCallRevert'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'mockCallRevert', TMode>({
    abi: vmABI,
    functionName: 'mockCallRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function useVmParseJsonAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonAddress'
        >['request']['abi'],
        'parseJsonAddress',
        TMode
      > & { functionName?: 'parseJsonAddress' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonAddress', TMode> & {
        abi?: never
        functionName?: 'parseJsonAddress'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonAddress', TMode>({
    abi: vmABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function useVmParseJsonAddressArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonAddressArray'
        >['request']['abi'],
        'parseJsonAddressArray',
        TMode
      > & { functionName?: 'parseJsonAddressArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonAddressArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonAddressArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonAddressArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function useVmParseJsonBool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBool'
        >['request']['abi'],
        'parseJsonBool',
        TMode
      > & { functionName?: 'parseJsonBool' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBool', TMode> & {
        abi?: never
        functionName?: 'parseJsonBool'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBool', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function useVmParseJsonBoolArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBoolArray'
        >['request']['abi'],
        'parseJsonBoolArray',
        TMode
      > & { functionName?: 'parseJsonBoolArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBoolArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonBoolArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBoolArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function useVmParseJsonBytes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBytes'
        >['request']['abi'],
        'parseJsonBytes',
        TMode
      > & { functionName?: 'parseJsonBytes' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBytes', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytes'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBytes', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function useVmParseJsonBytes32<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBytes32'
        >['request']['abi'],
        'parseJsonBytes32',
        TMode
      > & { functionName?: 'parseJsonBytes32' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBytes32', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytes32'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBytes32', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function useVmParseJsonBytes32Array<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBytes32Array'
        >['request']['abi'],
        'parseJsonBytes32Array',
        TMode
      > & { functionName?: 'parseJsonBytes32Array' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBytes32Array', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytes32Array'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBytes32Array', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function useVmParseJsonBytesArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonBytesArray'
        >['request']['abi'],
        'parseJsonBytesArray',
        TMode
      > & { functionName?: 'parseJsonBytesArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonBytesArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytesArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonBytesArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function useVmParseJsonInt<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonInt'
        >['request']['abi'],
        'parseJsonInt',
        TMode
      > & { functionName?: 'parseJsonInt' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonInt', TMode> & {
        abi?: never
        functionName?: 'parseJsonInt'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonInt', TMode>({
    abi: vmABI,
    functionName: 'parseJsonInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function useVmParseJsonIntArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonIntArray'
        >['request']['abi'],
        'parseJsonIntArray',
        TMode
      > & { functionName?: 'parseJsonIntArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonIntArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonIntArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonIntArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function useVmParseJsonString<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonString'
        >['request']['abi'],
        'parseJsonString',
        TMode
      > & { functionName?: 'parseJsonString' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonString', TMode> & {
        abi?: never
        functionName?: 'parseJsonString'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonString', TMode>({
    abi: vmABI,
    functionName: 'parseJsonString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function useVmParseJsonStringArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonStringArray'
        >['request']['abi'],
        'parseJsonStringArray',
        TMode
      > & { functionName?: 'parseJsonStringArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonStringArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonStringArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonStringArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function useVmParseJsonUint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonUint'
        >['request']['abi'],
        'parseJsonUint',
        TMode
      > & { functionName?: 'parseJsonUint' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonUint', TMode> & {
        abi?: never
        functionName?: 'parseJsonUint'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonUint', TMode>({
    abi: vmABI,
    functionName: 'parseJsonUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function useVmParseJsonUintArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'parseJsonUintArray'
        >['request']['abi'],
        'parseJsonUintArray',
        TMode
      > & { functionName?: 'parseJsonUintArray' }
    : UseContractWriteConfig<typeof vmABI, 'parseJsonUintArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonUintArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'parseJsonUintArray', TMode>({
    abi: vmABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmPauseGasMetering<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'pauseGasMetering'
        >['request']['abi'],
        'pauseGasMetering',
        TMode
      > & { functionName?: 'pauseGasMetering' }
    : UseContractWriteConfig<typeof vmABI, 'pauseGasMetering', TMode> & {
        abi?: never
        functionName?: 'pauseGasMetering'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'pauseGasMetering', TMode>({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function useVmPrank<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'prank'>['request']['abi'],
        'prank',
        TMode
      > & { functionName?: 'prank' }
    : UseContractWriteConfig<typeof vmABI, 'prank', TMode> & {
        abi?: never
        functionName?: 'prank'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'prank', TMode>({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prevrandao"`.
 */
export function useVmPrevrandao<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'prevrandao'
        >['request']['abi'],
        'prevrandao',
        TMode
      > & { functionName?: 'prevrandao' }
    : UseContractWriteConfig<typeof vmABI, 'prevrandao', TMode> & {
        abi?: never
        functionName?: 'prevrandao'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'prevrandao', TMode>({
    abi: vmABI,
    functionName: 'prevrandao',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readCallers"`.
 */
export function useVmReadCallers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'readCallers'
        >['request']['abi'],
        'readCallers',
        TMode
      > & { functionName?: 'readCallers' }
    : UseContractWriteConfig<typeof vmABI, 'readCallers', TMode> & {
        abi?: never
        functionName?: 'readCallers'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'readCallers', TMode>({
    abi: vmABI,
    functionName: 'readCallers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function useVmRecord<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'record'>['request']['abi'],
        'record',
        TMode
      > & { functionName?: 'record' }
    : UseContractWriteConfig<typeof vmABI, 'record', TMode> & {
        abi?: never
        functionName?: 'record'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'record', TMode>({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmRecordLogs<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'recordLogs'
        >['request']['abi'],
        'recordLogs',
        TMode
      > & { functionName?: 'recordLogs' }
    : UseContractWriteConfig<typeof vmABI, 'recordLogs', TMode> & {
        abi?: never
        functionName?: 'recordLogs'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'recordLogs', TMode>({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmRememberKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'rememberKey'
        >['request']['abi'],
        'rememberKey',
        TMode
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<typeof vmABI, 'rememberKey', TMode> & {
        abi?: never
        functionName?: 'rememberKey'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'rememberKey', TMode>({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeDir"`.
 */
export function useVmRemoveDir<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'removeDir'>['request']['abi'],
        'removeDir',
        TMode
      > & { functionName?: 'removeDir' }
    : UseContractWriteConfig<typeof vmABI, 'removeDir', TMode> & {
        abi?: never
        functionName?: 'removeDir'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'removeDir', TMode>({
    abi: vmABI,
    functionName: 'removeDir',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmRemoveFile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'removeFile'
        >['request']['abi'],
        'removeFile',
        TMode
      > & { functionName?: 'removeFile' }
    : UseContractWriteConfig<typeof vmABI, 'removeFile', TMode> & {
        abi?: never
        functionName?: 'removeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'removeFile', TMode>({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resetNonce"`.
 */
export function useVmResetNonce<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'resetNonce'
        >['request']['abi'],
        'resetNonce',
        TMode
      > & { functionName?: 'resetNonce' }
    : UseContractWriteConfig<typeof vmABI, 'resetNonce', TMode> & {
        abi?: never
        functionName?: 'resetNonce'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'resetNonce', TMode>({
    abi: vmABI,
    functionName: 'resetNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmResumeGasMetering<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'resumeGasMetering'
        >['request']['abi'],
        'resumeGasMetering',
        TMode
      > & { functionName?: 'resumeGasMetering' }
    : UseContractWriteConfig<typeof vmABI, 'resumeGasMetering', TMode> & {
        abi?: never
        functionName?: 'resumeGasMetering'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'resumeGasMetering', TMode>({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function useVmRevertTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'revertTo'>['request']['abi'],
        'revertTo',
        TMode
      > & { functionName?: 'revertTo' }
    : UseContractWriteConfig<typeof vmABI, 'revertTo', TMode> & {
        abi?: never
        functionName?: 'revertTo'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'revertTo', TMode>({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function useVmRevokePersistent<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'revokePersistent'
        >['request']['abi'],
        'revokePersistent',
        TMode
      > & { functionName?: 'revokePersistent' }
    : UseContractWriteConfig<typeof vmABI, 'revokePersistent', TMode> & {
        abi?: never
        functionName?: 'revokePersistent'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'revokePersistent', TMode>({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function useVmRoll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'roll'>['request']['abi'],
        'roll',
        TMode
      > & { functionName?: 'roll' }
    : UseContractWriteConfig<typeof vmABI, 'roll', TMode> & {
        abi?: never
        functionName?: 'roll'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'roll', TMode>({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function useVmRollFork<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'rollFork'>['request']['abi'],
        'rollFork',
        TMode
      > & { functionName?: 'rollFork' }
    : UseContractWriteConfig<typeof vmABI, 'rollFork', TMode> & {
        abi?: never
        functionName?: 'rollFork'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'rollFork', TMode>({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function useVmSelectFork<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'selectFork'
        >['request']['abi'],
        'selectFork',
        TMode
      > & { functionName?: 'selectFork' }
    : UseContractWriteConfig<typeof vmABI, 'selectFork', TMode> & {
        abi?: never
        functionName?: 'selectFork'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'selectFork', TMode>({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSerializeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeAddress'
        >['request']['abi'],
        'serializeAddress',
        TMode
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<typeof vmABI, 'serializeAddress', TMode> & {
        abi?: never
        functionName?: 'serializeAddress'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeAddress', TMode>({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSerializeBool<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeBool'
        >['request']['abi'],
        'serializeBool',
        TMode
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<typeof vmABI, 'serializeBool', TMode> & {
        abi?: never
        functionName?: 'serializeBool'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeBool', TMode>({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSerializeBytes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeBytes'
        >['request']['abi'],
        'serializeBytes',
        TMode
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<typeof vmABI, 'serializeBytes', TMode> & {
        abi?: never
        functionName?: 'serializeBytes'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeBytes', TMode>({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSerializeBytes32<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeBytes32'
        >['request']['abi'],
        'serializeBytes32',
        TMode
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<typeof vmABI, 'serializeBytes32', TMode> & {
        abi?: never
        functionName?: 'serializeBytes32'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeBytes32', TMode>({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSerializeInt<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeInt'
        >['request']['abi'],
        'serializeInt',
        TMode
      > & { functionName?: 'serializeInt' }
    : UseContractWriteConfig<typeof vmABI, 'serializeInt', TMode> & {
        abi?: never
        functionName?: 'serializeInt'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeInt', TMode>({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSerializeString<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeString'
        >['request']['abi'],
        'serializeString',
        TMode
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<typeof vmABI, 'serializeString', TMode> & {
        abi?: never
        functionName?: 'serializeString'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeString', TMode>({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSerializeUint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'serializeUint'
        >['request']['abi'],
        'serializeUint',
        TMode
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<typeof vmABI, 'serializeUint', TMode> & {
        abi?: never
        functionName?: 'serializeUint'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'serializeUint', TMode>({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSetEnv<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'setEnv'>['request']['abi'],
        'setEnv',
        TMode
      > & { functionName?: 'setEnv' }
    : UseContractWriteConfig<typeof vmABI, 'setEnv', TMode> & {
        abi?: never
        functionName?: 'setEnv'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'setEnv', TMode>({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function useVmSetNonce<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'setNonce'>['request']['abi'],
        'setNonce',
        TMode
      > & { functionName?: 'setNonce' }
    : UseContractWriteConfig<typeof vmABI, 'setNonce', TMode> & {
        abi?: never
        functionName?: 'setNonce'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'setNonce', TMode>({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonceUnsafe"`.
 */
export function useVmSetNonceUnsafe<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'setNonceUnsafe'
        >['request']['abi'],
        'setNonceUnsafe',
        TMode
      > & { functionName?: 'setNonceUnsafe' }
    : UseContractWriteConfig<typeof vmABI, 'setNonceUnsafe', TMode> & {
        abi?: never
        functionName?: 'setNonceUnsafe'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'setNonceUnsafe', TMode>({
    abi: vmABI,
    functionName: 'setNonceUnsafe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"skip"`.
 */
export function useVmSkip<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'skip'>['request']['abi'],
        'skip',
        TMode
      > & { functionName?: 'skip' }
    : UseContractWriteConfig<typeof vmABI, 'skip', TMode> & {
        abi?: never
        functionName?: 'skip'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'skip', TMode>({
    abi: vmABI,
    functionName: 'skip',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function useVmSnapshot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'snapshot'>['request']['abi'],
        'snapshot',
        TMode
      > & { functionName?: 'snapshot' }
    : UseContractWriteConfig<typeof vmABI, 'snapshot', TMode> & {
        abi?: never
        functionName?: 'snapshot'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'snapshot', TMode>({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmStartBroadcast<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'startBroadcast'
        >['request']['abi'],
        'startBroadcast',
        TMode
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<typeof vmABI, 'startBroadcast', TMode> & {
        abi?: never
        functionName?: 'startBroadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'startBroadcast', TMode>({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function useVmStartPrank<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'startPrank'
        >['request']['abi'],
        'startPrank',
        TMode
      > & { functionName?: 'startPrank' }
    : UseContractWriteConfig<typeof vmABI, 'startPrank', TMode> & {
        abi?: never
        functionName?: 'startPrank'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'startPrank', TMode>({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmStopBroadcast<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'stopBroadcast'
        >['request']['abi'],
        'stopBroadcast',
        TMode
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<typeof vmABI, 'stopBroadcast', TMode> & {
        abi?: never
        functionName?: 'stopBroadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'stopBroadcast', TMode>({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function useVmStopPrank<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'stopPrank'>['request']['abi'],
        'stopPrank',
        TMode
      > & { functionName?: 'stopPrank' }
    : UseContractWriteConfig<typeof vmABI, 'stopPrank', TMode> & {
        abi?: never
        functionName?: 'stopPrank'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'stopPrank', TMode>({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function useVmStore<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'store'>['request']['abi'],
        'store',
        TMode
      > & { functionName?: 'store' }
    : UseContractWriteConfig<typeof vmABI, 'store', TMode> & {
        abi?: never
        functionName?: 'store'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'store', TMode>({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function useVmTransact<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'transact'>['request']['abi'],
        'transact',
        TMode
      > & { functionName?: 'transact' }
    : UseContractWriteConfig<typeof vmABI, 'transact', TMode> & {
        abi?: never
        functionName?: 'transact'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'transact', TMode>({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"txGasPrice"`.
 */
export function useVmTxGasPrice<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'txGasPrice'
        >['request']['abi'],
        'txGasPrice',
        TMode
      > & { functionName?: 'txGasPrice' }
    : UseContractWriteConfig<typeof vmABI, 'txGasPrice', TMode> & {
        abi?: never
        functionName?: 'txGasPrice'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'txGasPrice', TMode>({
    abi: vmABI,
    functionName: 'txGasPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function useVmWarp<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'warp'>['request']['abi'],
        'warp',
        TMode
      > & { functionName?: 'warp' }
    : UseContractWriteConfig<typeof vmABI, 'warp', TMode> & {
        abi?: never
        functionName?: 'warp'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'warp', TMode>({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmWriteFile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'writeFile'>['request']['abi'],
        'writeFile',
        TMode
      > & { functionName?: 'writeFile' }
    : UseContractWriteConfig<typeof vmABI, 'writeFile', TMode> & {
        abi?: never
        functionName?: 'writeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'writeFile', TMode>({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmWriteFileBinary<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmABI,
          'writeFileBinary'
        >['request']['abi'],
        'writeFileBinary',
        TMode
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<typeof vmABI, 'writeFileBinary', TMode> & {
        abi?: never
        functionName?: 'writeFileBinary'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'writeFileBinary', TMode>({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmWriteJson<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'writeJson'>['request']['abi'],
        'writeJson',
        TMode
      > & { functionName?: 'writeJson' }
    : UseContractWriteConfig<typeof vmABI, 'writeJson', TMode> & {
        abi?: never
        functionName?: 'writeJson'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'writeJson', TMode>({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmWriteLine<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmABI, 'writeLine'>['request']['abi'],
        'writeLine',
        TMode
      > & { functionName?: 'writeLine' }
    : UseContractWriteConfig<typeof vmABI, 'writeLine', TMode> & {
        abi?: never
        functionName?: 'writeLine'
      } = {} as any,
) {
  return useContractWrite<typeof vmABI, 'writeLine', TMode>({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function usePrepareVmWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmAccesses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function usePrepareVmAllowCheatcodes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"breakpoint"`.
 */
export function usePrepareVmBreakpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'breakpoint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'breakpoint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'breakpoint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function usePrepareVmChainId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function usePrepareVmClearMockedCalls(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmCloseFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function usePrepareVmCoinbase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createDir"`.
 */
export function usePrepareVmCreateDir(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createDir'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createDir',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createDir'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareVmCreateFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function usePrepareVmCreateSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function usePrepareVmDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'deal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'deal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function usePrepareVmDifficulty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmEnvOr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'envOr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'envOr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'envOr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function usePrepareVmEtch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'etch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'etch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function usePrepareVmExpectCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCallMinGas"`.
 */
export function usePrepareVmExpectCallMinGas(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectCallMinGas'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCallMinGas',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectCallMinGas'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function usePrepareVmExpectEmit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function usePrepareVmExpectRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemory"`.
 */
export function usePrepareVmExpectSafeMemory(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectSafeMemory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemory',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectSafeMemory'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectSafeMemoryCall"`.
 */
export function usePrepareVmExpectSafeMemoryCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectSafeMemoryCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectSafeMemoryCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectSafeMemoryCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function usePrepareVmFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'fee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'fee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmFfi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getLabel"`.
 */
export function usePrepareVmGetLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getLabel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getLabel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getLabel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmGetRecordedLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'label'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'label'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function usePrepareVmMakePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function usePrepareVmMockCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCallRevert"`.
 */
export function usePrepareVmMockCallRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'mockCallRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCallRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'mockCallRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function usePrepareVmParseJsonAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function usePrepareVmParseJsonAddressArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddressArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddressArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function usePrepareVmParseJsonBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function usePrepareVmParseJsonBoolArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBoolArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBoolArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function usePrepareVmParseJsonBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function usePrepareVmParseJsonBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function usePrepareVmParseJsonBytes32Array(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32Array'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32Array'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function usePrepareVmParseJsonBytesArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytesArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytesArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function usePrepareVmParseJsonInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function usePrepareVmParseJsonIntArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonIntArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonIntArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function usePrepareVmParseJsonString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function usePrepareVmParseJsonStringArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonStringArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonStringArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function usePrepareVmParseJsonUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function usePrepareVmParseJsonUintArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUintArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUintArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmPauseGasMetering(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'pauseGasMetering'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'pauseGasMetering'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function usePrepareVmPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'prank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'prank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prevrandao"`.
 */
export function usePrepareVmPrevrandao(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'prevrandao'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prevrandao',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'prevrandao'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readCallers"`.
 */
export function usePrepareVmReadCallers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'readCallers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'readCallers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'readCallers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'record'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'record'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmRecordLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmRememberKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeDir"`.
 */
export function usePrepareVmRemoveDir(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'removeDir'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeDir',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'removeDir'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmRemoveFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resetNonce"`.
 */
export function usePrepareVmResetNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'resetNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'resetNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'resetNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmResumeGasMetering(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'resumeGasMetering'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'resumeGasMetering'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function usePrepareVmRevertTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function usePrepareVmRevokePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function usePrepareVmRoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'roll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'roll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function usePrepareVmRollFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function usePrepareVmSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSerializeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSerializeBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSerializeBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSerializeBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSerializeInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSerializeString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSerializeUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSetEnv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function usePrepareVmSetNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonceUnsafe"`.
 */
export function usePrepareVmSetNonceUnsafe(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setNonceUnsafe'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonceUnsafe',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setNonceUnsafe'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"skip"`.
 */
export function usePrepareVmSkip(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'skip'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'skip',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'skip'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareVmSnapshot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmStartBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function usePrepareVmStartPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmStopBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function usePrepareVmStopPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareVmStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'store'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'store'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function usePrepareVmTransact(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'transact'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'transact'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"txGasPrice"`.
 */
export function usePrepareVmTxGasPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'txGasPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'txGasPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'txGasPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function usePrepareVmWarp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'warp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'warp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmWriteFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmWriteFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmWriteJson(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeJson'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeJson'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmWriteLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"addr"`.
 */
export function useVmSafeAddr<
  TFunctionName extends 'addr',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"assume"`.
 */
export function useVmSafeAssume<
  TFunctionName extends 'assume',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'assume',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmSafeDeriveKey<
  TFunctionName extends 'deriveKey',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'deriveKey',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmSafeEnvAddress<
  TFunctionName extends 'envAddress',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envAddress',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmSafeEnvBool<
  TFunctionName extends 'envBool',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBool',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmSafeEnvBytes<
  TFunctionName extends 'envBytes',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBytes',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmSafeEnvBytes32<
  TFunctionName extends 'envBytes32',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmSafeEnvInt<
  TFunctionName extends 'envInt',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envInt',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envString"`.
 */
export function useVmSafeEnvString<
  TFunctionName extends 'envString',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envString',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmSafeEnvUint<
  TFunctionName extends 'envUint',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envUint',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function useVmSafeFsMetadata<
  TFunctionName extends 'fsMetadata',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'fsMetadata',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmSafeGetCode<
  TFunctionName extends 'getCode',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getCode',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmSafeGetDeployedCode<
  TFunctionName extends 'getDeployedCode',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getDeployedCode',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmSafeGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"load"`.
 */
export function useVmSafeLoad<
  TFunctionName extends 'load',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'load',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmSafeParseAddress<
  TFunctionName extends 'parseAddress',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseAddress',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmSafeParseBool<
  TFunctionName extends 'parseBool',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBool',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmSafeParseBytes<
  TFunctionName extends 'parseBytes',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBytes',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmSafeParseBytes32<
  TFunctionName extends 'parseBytes32',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmSafeParseInt<
  TFunctionName extends 'parseInt',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseInt',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmSafeParseJson<
  TFunctionName extends 'parseJson',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseJson',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmSafeParseUint<
  TFunctionName extends 'parseUint',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseUint',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmSafeProjectRoot<
  TFunctionName extends 'projectRoot',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'projectRoot',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readDir"`.
 */
export function useVmSafeReadDir<
  TFunctionName extends 'readDir',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readDir',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmSafeReadFile<
  TFunctionName extends 'readFile',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readFile',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmSafeReadFileBinary<
  TFunctionName extends 'readFileBinary',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readFileBinary',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmSafeReadLine<
  TFunctionName extends 'readLine',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readLine',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readLink"`.
 */
export function useVmSafeReadLink<
  TFunctionName extends 'readLink',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readLink',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmSafeRpcUrl<
  TFunctionName extends 'rpcUrl',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrl',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmSafeRpcUrlStructs<
  TFunctionName extends 'rpcUrlStructs',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrlStructs',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmSafeRpcUrls<
  TFunctionName extends 'rpcUrls',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrls',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSafeSign<
  TFunctionName extends 'sign',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'sign',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"toString"`.
 */
export function useVmSafeToString<
  TFunctionName extends 'toString',
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'toString',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmSafeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof vmSafeABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, TFunctionName, TMode>({
    abi: vmSafeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmSafeAccesses<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'accesses'
        >['request']['abi'],
        'accesses',
        TMode
      > & { functionName?: 'accesses' }
    : UseContractWriteConfig<typeof vmSafeABI, 'accesses', TMode> & {
        abi?: never
        functionName?: 'accesses'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'accesses', TMode>({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"breakpoint"`.
 */
export function useVmSafeBreakpoint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'breakpoint'
        >['request']['abi'],
        'breakpoint',
        TMode
      > & { functionName?: 'breakpoint' }
    : UseContractWriteConfig<typeof vmSafeABI, 'breakpoint', TMode> & {
        abi?: never
        functionName?: 'breakpoint'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'breakpoint', TMode>({
    abi: vmSafeABI,
    functionName: 'breakpoint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmSafeBroadcast<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'broadcast'
        >['request']['abi'],
        'broadcast',
        TMode
      > & { functionName?: 'broadcast' }
    : UseContractWriteConfig<typeof vmSafeABI, 'broadcast', TMode> & {
        abi?: never
        functionName?: 'broadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'broadcast', TMode>({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmSafeCloseFile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'closeFile'
        >['request']['abi'],
        'closeFile',
        TMode
      > & { functionName?: 'closeFile' }
    : UseContractWriteConfig<typeof vmSafeABI, 'closeFile', TMode> & {
        abi?: never
        functionName?: 'closeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'closeFile', TMode>({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createDir"`.
 */
export function useVmSafeCreateDir<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'createDir'
        >['request']['abi'],
        'createDir',
        TMode
      > & { functionName?: 'createDir' }
    : UseContractWriteConfig<typeof vmSafeABI, 'createDir', TMode> & {
        abi?: never
        functionName?: 'createDir'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'createDir', TMode>({
    abi: vmSafeABI,
    functionName: 'createDir',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmSafeEnvOr<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmSafeABI, 'envOr'>['request']['abi'],
        'envOr',
        TMode
      > & { functionName?: 'envOr' }
    : UseContractWriteConfig<typeof vmSafeABI, 'envOr', TMode> & {
        abi?: never
        functionName?: 'envOr'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'envOr', TMode>({
    abi: vmSafeABI,
    functionName: 'envOr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmSafeFfi<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmSafeABI, 'ffi'>['request']['abi'],
        'ffi',
        TMode
      > & { functionName?: 'ffi' }
    : UseContractWriteConfig<typeof vmSafeABI, 'ffi', TMode> & {
        abi?: never
        functionName?: 'ffi'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'ffi', TMode>({
    abi: vmSafeABI,
    functionName: 'ffi',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getLabel"`.
 */
export function useVmSafeGetLabel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'getLabel'
        >['request']['abi'],
        'getLabel',
        TMode
      > & { functionName?: 'getLabel' }
    : UseContractWriteConfig<typeof vmSafeABI, 'getLabel', TMode> & {
        abi?: never
        functionName?: 'getLabel'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'getLabel', TMode>({
    abi: vmSafeABI,
    functionName: 'getLabel',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmSafeGetRecordedLogs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'getRecordedLogs'
        >['request']['abi'],
        'getRecordedLogs',
        TMode
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs', TMode> & {
        abi?: never
        functionName?: 'getRecordedLogs'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'getRecordedLogs', TMode>({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function useVmSafeLabel<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof vmSafeABI, 'label'>['request']['abi'],
        'label',
        TMode
      > & { functionName?: 'label' }
    : UseContractWriteConfig<typeof vmSafeABI, 'label', TMode> & {
        abi?: never
        functionName?: 'label'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'label', TMode>({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function useVmSafeParseJsonAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonAddress'
        >['request']['abi'],
        'parseJsonAddress',
        TMode
      > & { functionName?: 'parseJsonAddress' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonAddress', TMode> & {
        abi?: never
        functionName?: 'parseJsonAddress'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonAddress', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function useVmSafeParseJsonAddressArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonAddressArray'
        >['request']['abi'],
        'parseJsonAddressArray',
        TMode
      > & { functionName?: 'parseJsonAddressArray' }
    : UseContractWriteConfig<
        typeof vmSafeABI,
        'parseJsonAddressArray',
        TMode
      > & {
        abi?: never
        functionName?: 'parseJsonAddressArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonAddressArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function useVmSafeParseJsonBool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBool'
        >['request']['abi'],
        'parseJsonBool',
        TMode
      > & { functionName?: 'parseJsonBool' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonBool', TMode> & {
        abi?: never
        functionName?: 'parseJsonBool'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBool', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function useVmSafeParseJsonBoolArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBoolArray'
        >['request']['abi'],
        'parseJsonBoolArray',
        TMode
      > & { functionName?: 'parseJsonBoolArray' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonBoolArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonBoolArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBoolArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function useVmSafeParseJsonBytes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBytes'
        >['request']['abi'],
        'parseJsonBytes',
        TMode
      > & { functionName?: 'parseJsonBytes' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytes'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBytes', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function useVmSafeParseJsonBytes32<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBytes32'
        >['request']['abi'],
        'parseJsonBytes32',
        TMode
      > & { functionName?: 'parseJsonBytes32' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytes32'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBytes32', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function useVmSafeParseJsonBytes32Array<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBytes32Array'
        >['request']['abi'],
        'parseJsonBytes32Array',
        TMode
      > & { functionName?: 'parseJsonBytes32Array' }
    : UseContractWriteConfig<
        typeof vmSafeABI,
        'parseJsonBytes32Array',
        TMode
      > & {
        abi?: never
        functionName?: 'parseJsonBytes32Array'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBytes32Array', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function useVmSafeParseJsonBytesArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonBytesArray'
        >['request']['abi'],
        'parseJsonBytesArray',
        TMode
      > & { functionName?: 'parseJsonBytesArray' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonBytesArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonBytesArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonBytesArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function useVmSafeParseJsonInt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonInt'
        >['request']['abi'],
        'parseJsonInt',
        TMode
      > & { functionName?: 'parseJsonInt' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonInt', TMode> & {
        abi?: never
        functionName?: 'parseJsonInt'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonInt', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function useVmSafeParseJsonIntArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonIntArray'
        >['request']['abi'],
        'parseJsonIntArray',
        TMode
      > & { functionName?: 'parseJsonIntArray' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonIntArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonIntArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonIntArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function useVmSafeParseJsonString<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonString'
        >['request']['abi'],
        'parseJsonString',
        TMode
      > & { functionName?: 'parseJsonString' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonString', TMode> & {
        abi?: never
        functionName?: 'parseJsonString'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonString', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function useVmSafeParseJsonStringArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonStringArray'
        >['request']['abi'],
        'parseJsonStringArray',
        TMode
      > & { functionName?: 'parseJsonStringArray' }
    : UseContractWriteConfig<
        typeof vmSafeABI,
        'parseJsonStringArray',
        TMode
      > & {
        abi?: never
        functionName?: 'parseJsonStringArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonStringArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function useVmSafeParseJsonUint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonUint'
        >['request']['abi'],
        'parseJsonUint',
        TMode
      > & { functionName?: 'parseJsonUint' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonUint', TMode> & {
        abi?: never
        functionName?: 'parseJsonUint'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonUint', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function useVmSafeParseJsonUintArray<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'parseJsonUintArray'
        >['request']['abi'],
        'parseJsonUintArray',
        TMode
      > & { functionName?: 'parseJsonUintArray' }
    : UseContractWriteConfig<typeof vmSafeABI, 'parseJsonUintArray', TMode> & {
        abi?: never
        functionName?: 'parseJsonUintArray'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'parseJsonUintArray', TMode>({
    abi: vmSafeABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmSafePauseGasMetering<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'pauseGasMetering'
        >['request']['abi'],
        'pauseGasMetering',
        TMode
      > & { functionName?: 'pauseGasMetering' }
    : UseContractWriteConfig<typeof vmSafeABI, 'pauseGasMetering', TMode> & {
        abi?: never
        functionName?: 'pauseGasMetering'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'pauseGasMetering', TMode>({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function useVmSafeRecord<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'record'
        >['request']['abi'],
        'record',
        TMode
      > & { functionName?: 'record' }
    : UseContractWriteConfig<typeof vmSafeABI, 'record', TMode> & {
        abi?: never
        functionName?: 'record'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'record', TMode>({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmSafeRecordLogs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'recordLogs'
        >['request']['abi'],
        'recordLogs',
        TMode
      > & { functionName?: 'recordLogs' }
    : UseContractWriteConfig<typeof vmSafeABI, 'recordLogs', TMode> & {
        abi?: never
        functionName?: 'recordLogs'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'recordLogs', TMode>({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmSafeRememberKey<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'rememberKey'
        >['request']['abi'],
        'rememberKey',
        TMode
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<typeof vmSafeABI, 'rememberKey', TMode> & {
        abi?: never
        functionName?: 'rememberKey'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'rememberKey', TMode>({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeDir"`.
 */
export function useVmSafeRemoveDir<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'removeDir'
        >['request']['abi'],
        'removeDir',
        TMode
      > & { functionName?: 'removeDir' }
    : UseContractWriteConfig<typeof vmSafeABI, 'removeDir', TMode> & {
        abi?: never
        functionName?: 'removeDir'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'removeDir', TMode>({
    abi: vmSafeABI,
    functionName: 'removeDir',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmSafeRemoveFile<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'removeFile'
        >['request']['abi'],
        'removeFile',
        TMode
      > & { functionName?: 'removeFile' }
    : UseContractWriteConfig<typeof vmSafeABI, 'removeFile', TMode> & {
        abi?: never
        functionName?: 'removeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'removeFile', TMode>({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmSafeResumeGasMetering<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'resumeGasMetering'
        >['request']['abi'],
        'resumeGasMetering',
        TMode
      > & { functionName?: 'resumeGasMetering' }
    : UseContractWriteConfig<typeof vmSafeABI, 'resumeGasMetering', TMode> & {
        abi?: never
        functionName?: 'resumeGasMetering'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'resumeGasMetering', TMode>({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSafeSerializeAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeAddress'
        >['request']['abi'],
        'serializeAddress',
        TMode
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeAddress', TMode> & {
        abi?: never
        functionName?: 'serializeAddress'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeAddress', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSafeSerializeBool<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeBool'
        >['request']['abi'],
        'serializeBool',
        TMode
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeBool', TMode> & {
        abi?: never
        functionName?: 'serializeBool'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeBool', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSafeSerializeBytes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeBytes'
        >['request']['abi'],
        'serializeBytes',
        TMode
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeBytes', TMode> & {
        abi?: never
        functionName?: 'serializeBytes'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeBytes', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSafeSerializeBytes32<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeBytes32'
        >['request']['abi'],
        'serializeBytes32',
        TMode
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeBytes32', TMode> & {
        abi?: never
        functionName?: 'serializeBytes32'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeBytes32', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSafeSerializeInt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeInt'
        >['request']['abi'],
        'serializeInt',
        TMode
      > & { functionName?: 'serializeInt' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeInt', TMode> & {
        abi?: never
        functionName?: 'serializeInt'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeInt', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSafeSerializeString<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeString'
        >['request']['abi'],
        'serializeString',
        TMode
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeString', TMode> & {
        abi?: never
        functionName?: 'serializeString'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeString', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSafeSerializeUint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'serializeUint'
        >['request']['abi'],
        'serializeUint',
        TMode
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<typeof vmSafeABI, 'serializeUint', TMode> & {
        abi?: never
        functionName?: 'serializeUint'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'serializeUint', TMode>({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSafeSetEnv<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'setEnv'
        >['request']['abi'],
        'setEnv',
        TMode
      > & { functionName?: 'setEnv' }
    : UseContractWriteConfig<typeof vmSafeABI, 'setEnv', TMode> & {
        abi?: never
        functionName?: 'setEnv'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'setEnv', TMode>({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmSafeStartBroadcast<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'startBroadcast'
        >['request']['abi'],
        'startBroadcast',
        TMode
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<typeof vmSafeABI, 'startBroadcast', TMode> & {
        abi?: never
        functionName?: 'startBroadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'startBroadcast', TMode>({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmSafeStopBroadcast<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'stopBroadcast'
        >['request']['abi'],
        'stopBroadcast',
        TMode
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<typeof vmSafeABI, 'stopBroadcast', TMode> & {
        abi?: never
        functionName?: 'stopBroadcast'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'stopBroadcast', TMode>({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmSafeWriteFile<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'writeFile'
        >['request']['abi'],
        'writeFile',
        TMode
      > & { functionName?: 'writeFile' }
    : UseContractWriteConfig<typeof vmSafeABI, 'writeFile', TMode> & {
        abi?: never
        functionName?: 'writeFile'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'writeFile', TMode>({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmSafeWriteFileBinary<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'writeFileBinary'
        >['request']['abi'],
        'writeFileBinary',
        TMode
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<typeof vmSafeABI, 'writeFileBinary', TMode> & {
        abi?: never
        functionName?: 'writeFileBinary'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'writeFileBinary', TMode>({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmSafeWriteJson<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'writeJson'
        >['request']['abi'],
        'writeJson',
        TMode
      > & { functionName?: 'writeJson' }
    : UseContractWriteConfig<typeof vmSafeABI, 'writeJson', TMode> & {
        abi?: never
        functionName?: 'writeJson'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'writeJson', TMode>({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmSafeWriteLine<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof vmSafeABI,
          'writeLine'
        >['request']['abi'],
        'writeLine',
        TMode
      > & { functionName?: 'writeLine' }
    : UseContractWriteConfig<typeof vmSafeABI, 'writeLine', TMode> & {
        abi?: never
        functionName?: 'writeLine'
      } = {} as any,
) {
  return useContractWrite<typeof vmSafeABI, 'writeLine', TMode>({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function usePrepareVmSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmSafeAccesses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"breakpoint"`.
 */
export function usePrepareVmSafeBreakpoint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'breakpoint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'breakpoint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'breakpoint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmSafeBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmSafeCloseFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"createDir"`.
 */
export function usePrepareVmSafeCreateDir(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'createDir'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'createDir',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'createDir'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmSafeEnvOr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'envOr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'envOr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'envOr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmSafeFfi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'ffi'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'ffi',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'ffi'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getLabel"`.
 */
export function usePrepareVmSafeGetLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'getLabel'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getLabel',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'getLabel'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmSafeGetRecordedLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmSafeLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'label'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'label'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function usePrepareVmSafeParseJsonAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function usePrepareVmSafeParseJsonAddressArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddressArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddressArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function usePrepareVmSafeParseJsonBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function usePrepareVmSafeParseJsonBoolArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBoolArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBoolArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function usePrepareVmSafeParseJsonBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function usePrepareVmSafeParseJsonBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function usePrepareVmSafeParseJsonBytes32Array(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32Array'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32Array'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function usePrepareVmSafeParseJsonBytesArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytesArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytesArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function usePrepareVmSafeParseJsonInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function usePrepareVmSafeParseJsonIntArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonIntArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonIntArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function usePrepareVmSafeParseJsonString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function usePrepareVmSafeParseJsonStringArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonStringArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonStringArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function usePrepareVmSafeParseJsonUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function usePrepareVmSafeParseJsonUintArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUintArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUintArray'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmSafePauseGasMetering(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'pauseGasMetering'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'pauseGasMetering'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmSafeRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'record'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'record'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmSafeRecordLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmSafeRememberKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeDir"`.
 */
export function usePrepareVmSafeRemoveDir(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeDir'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeDir',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeDir'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmSafeRemoveFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmSafeResumeGasMetering(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'resumeGasMetering'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'resumeGasMetering'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSafeSerializeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSafeSerializeBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSafeSerializeBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSafeSerializeBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSafeSerializeInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSafeSerializeString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSafeSerializeUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSafeSetEnv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'setEnv'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'setEnv'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmSafeStartBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmSafeStopBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmSafeWriteFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmSafeWriteFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmSafeWriteJson(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmSafeWriteLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>)
}
